// <auto-generated />
using System;
using Astrana.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Astrana.Core.Data.Migrations.MSSqlServer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231126010445_Config2")]
    partial class Config2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Astrana.Core.Data.Entities.AccessManagement.ApiAccessToken", b =>
                {
                    b.Property<Guid>("ApiAccessTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnOrder(1);

                    b.HasKey("ApiAccessTokenId");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("ApiAccessTokens", "iam");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Configuration.Audience", b =>
                {
                    b.Property<Guid>("AudienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnOrder(3);

                    b.Property<string>("DescriptionTrxCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsUserDefined")
                        .HasColumnType("bit")
                        .HasColumnOrder(11);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<short?>("MaximumAge")
                        .HasColumnType("smallint")
                        .HasColumnOrder(8);

                    b.Property<short?>("MinimumAge")
                        .HasColumnType("smallint")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnOrder(1);

                    b.Property<string>("NameTrxCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<Guid?>("UserProfileDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AudienceId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameTrxCode")
                        .IsUnique()
                        .HasFilter("[NameTrxCode] IS NOT NULL");

                    b.HasIndex("UserProfileDetailId");

                    b.ToTable("Audiences", "config");

                    b.HasData(
                        new
                        {
                            AudienceId = new Guid("94b9b87c-a0a1-4721-a905-897b12e81fc7"),
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Content associated with this audience will only be accessible to it's owner.",
                            DescriptionTrxCode = "audience_description_me",
                            IsUserDefined = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Only Me",
                            NameTrxCode = "only_me"
                        },
                        new
                        {
                            AudienceId = new Guid("0b255ccf-19e4-49c0-a3e0-d8513416d52d"),
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Content associated with this audience will only be accessible to peers that are considered family.",
                            DescriptionTrxCode = "audience_description_family",
                            IsUserDefined = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Family",
                            NameTrxCode = "family"
                        },
                        new
                        {
                            AudienceId = new Guid("7255b812-56c0-4293-ba3e-f3a28e7256e3"),
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Content associated with this audience will only be accessible to peers that are considered part of your professional network.",
                            DescriptionTrxCode = "audience_description_professional",
                            IsUserDefined = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Professional",
                            NameTrxCode = "professional"
                        },
                        new
                        {
                            AudienceId = new Guid("0c4e6f37-09af-4b5b-9081-42368f9884ea"),
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Content associated with this audience will be accessible to everyone.",
                            DescriptionTrxCode = "audience_description_public",
                            IsUserDefined = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Public",
                            NameTrxCode = "public"
                        });
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Configuration.Country", b =>
                {
                    b.Property<long>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CountryId"));

                    b.Property<Guid?>("AudienceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(1);

                    b.Property<string>("NameTrxCode")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(2);

                    b.Property<int?>("NumberCode")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<string>("OfficialName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(3);

                    b.Property<string>("OfficialNameTrxCode")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnOrder(4);

                    b.Property<string>("ThreeLetterCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnOrder(6);

                    b.Property<string>("TwoLetterCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnOrder(5);

                    b.HasKey("CountryId");

                    b.HasIndex("AudienceId");

                    b.HasIndex("NameTrxCode")
                        .IsUnique();

                    b.HasIndex("NumberCode")
                        .IsUnique()
                        .HasFilter("[NumberCode] IS NOT NULL");

                    b.HasIndex("OfficialNameTrxCode")
                        .IsUnique();

                    b.HasIndex("ThreeLetterCode")
                        .IsUnique();

                    b.HasIndex("TwoLetterCode")
                        .IsUnique();

                    b.ToTable("Countries", "config");

                    b.HasData(
                        new
                        {
                            CountryId = 1L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Afghanistan",
                            NameTrxCode = "country_name_afg",
                            NumberCode = 4,
                            OfficialName = "The Islamic Republic of Afghanistan",
                            OfficialNameTrxCode = "country_name_official_afg",
                            ThreeLetterCode = "AFG",
                            TwoLetterCode = "AF"
                        },
                        new
                        {
                            CountryId = 2L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Åland Islands",
                            NameTrxCode = "country_name_ala",
                            NumberCode = 248,
                            OfficialName = "Åland",
                            OfficialNameTrxCode = "country_name_official_ala",
                            ThreeLetterCode = "ALA",
                            TwoLetterCode = "AX"
                        },
                        new
                        {
                            CountryId = 3L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Albania",
                            NameTrxCode = "country_name_alb",
                            NumberCode = 8,
                            OfficialName = "The Republic of Albania",
                            OfficialNameTrxCode = "country_name_official_alb",
                            ThreeLetterCode = "ALB",
                            TwoLetterCode = "AL"
                        },
                        new
                        {
                            CountryId = 4L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Algeria",
                            NameTrxCode = "country_name_dza",
                            NumberCode = 12,
                            OfficialName = "The People's Democratic Republic of Algeria",
                            OfficialNameTrxCode = "country_name_official_dza",
                            ThreeLetterCode = "DZA",
                            TwoLetterCode = "DZ"
                        },
                        new
                        {
                            CountryId = 5L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "American Samoa",
                            NameTrxCode = "country_name_asm",
                            NumberCode = 16,
                            OfficialName = "The Territory of American Samoa",
                            OfficialNameTrxCode = "country_name_official_asm",
                            ThreeLetterCode = "ASM",
                            TwoLetterCode = "AS"
                        },
                        new
                        {
                            CountryId = 6L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Andorra",
                            NameTrxCode = "country_name_and",
                            NumberCode = 20,
                            OfficialName = "The Principality of Andorra",
                            OfficialNameTrxCode = "country_name_official_and",
                            ThreeLetterCode = "AND",
                            TwoLetterCode = "AD"
                        },
                        new
                        {
                            CountryId = 7L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Angola",
                            NameTrxCode = "country_name_ago",
                            NumberCode = 24,
                            OfficialName = "The Republic of Angola",
                            OfficialNameTrxCode = "country_name_official_ago",
                            ThreeLetterCode = "AGO",
                            TwoLetterCode = "AO"
                        },
                        new
                        {
                            CountryId = 8L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Anguilla",
                            NameTrxCode = "country_name_aia",
                            NumberCode = 660,
                            OfficialName = "Anguilla",
                            OfficialNameTrxCode = "country_name_official_aia",
                            ThreeLetterCode = "AIA",
                            TwoLetterCode = "AI"
                        },
                        new
                        {
                            CountryId = 9L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Antarctica",
                            NameTrxCode = "country_name_ata",
                            NumberCode = 10,
                            OfficialName = "All land and ice shelves south of the 60th parallel south",
                            OfficialNameTrxCode = "country_name_official_ata",
                            ThreeLetterCode = "ATA",
                            TwoLetterCode = "AQ"
                        },
                        new
                        {
                            CountryId = 10L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Antigua and Barbuda",
                            NameTrxCode = "country_name_atg",
                            NumberCode = 28,
                            OfficialName = "Antigua and Barbuda",
                            OfficialNameTrxCode = "country_name_official_atg",
                            ThreeLetterCode = "ATG",
                            TwoLetterCode = "AG"
                        },
                        new
                        {
                            CountryId = 11L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Argentina",
                            NameTrxCode = "country_name_arg",
                            NumberCode = 32,
                            OfficialName = "The Argentine Republic",
                            OfficialNameTrxCode = "country_name_official_arg",
                            ThreeLetterCode = "ARG",
                            TwoLetterCode = "AR"
                        },
                        new
                        {
                            CountryId = 12L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Armenia",
                            NameTrxCode = "country_name_arm",
                            NumberCode = 51,
                            OfficialName = "The Republic of Armenia",
                            OfficialNameTrxCode = "country_name_official_arm",
                            ThreeLetterCode = "ARM",
                            TwoLetterCode = "AM"
                        },
                        new
                        {
                            CountryId = 13L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Aruba",
                            NameTrxCode = "country_name_abw",
                            NumberCode = 533,
                            OfficialName = "Aruba",
                            OfficialNameTrxCode = "country_name_official_abw",
                            ThreeLetterCode = "ABW",
                            TwoLetterCode = "AW"
                        },
                        new
                        {
                            CountryId = 14L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Australia",
                            NameTrxCode = "country_name_aus",
                            NumberCode = 36,
                            OfficialName = "The Commonwealth of Australia",
                            OfficialNameTrxCode = "country_name_official_aus",
                            ThreeLetterCode = "AUS",
                            TwoLetterCode = "AU"
                        },
                        new
                        {
                            CountryId = 15L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Austria",
                            NameTrxCode = "country_name_aut",
                            NumberCode = 40,
                            OfficialName = "The Republic of Austria",
                            OfficialNameTrxCode = "country_name_official_aut",
                            ThreeLetterCode = "AUT",
                            TwoLetterCode = "AT"
                        },
                        new
                        {
                            CountryId = 16L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Azerbaijan",
                            NameTrxCode = "country_name_aze",
                            NumberCode = 31,
                            OfficialName = "The Republic of Azerbaijan",
                            OfficialNameTrxCode = "country_name_official_aze",
                            ThreeLetterCode = "AZE",
                            TwoLetterCode = "AZ"
                        },
                        new
                        {
                            CountryId = 17L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Bahamas",
                            NameTrxCode = "country_name_bhs",
                            NumberCode = 44,
                            OfficialName = "The Commonwealth of The Bahamas",
                            OfficialNameTrxCode = "country_name_official_bhs",
                            ThreeLetterCode = "BHS",
                            TwoLetterCode = "BS"
                        },
                        new
                        {
                            CountryId = 18L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Bahrain",
                            NameTrxCode = "country_name_bhr",
                            NumberCode = 48,
                            OfficialName = "The Kingdom of Bahrain",
                            OfficialNameTrxCode = "country_name_official_bhr",
                            ThreeLetterCode = "BHR",
                            TwoLetterCode = "BH"
                        },
                        new
                        {
                            CountryId = 19L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Bangladesh",
                            NameTrxCode = "country_name_bgd",
                            NumberCode = 50,
                            OfficialName = "The People's Republic of Bangladesh",
                            OfficialNameTrxCode = "country_name_official_bgd",
                            ThreeLetterCode = "BGD",
                            TwoLetterCode = "BD"
                        },
                        new
                        {
                            CountryId = 20L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Barbados",
                            NameTrxCode = "country_name_brb",
                            NumberCode = 52,
                            OfficialName = "Barbados",
                            OfficialNameTrxCode = "country_name_official_brb",
                            ThreeLetterCode = "BRB",
                            TwoLetterCode = "BB"
                        },
                        new
                        {
                            CountryId = 21L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Belarus",
                            NameTrxCode = "country_name_blr",
                            NumberCode = 112,
                            OfficialName = "The Republic of Belarus",
                            OfficialNameTrxCode = "country_name_official_blr",
                            ThreeLetterCode = "BLR",
                            TwoLetterCode = "BY"
                        },
                        new
                        {
                            CountryId = 22L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Belgium",
                            NameTrxCode = "country_name_bel",
                            NumberCode = 56,
                            OfficialName = "The Kingdom of Belgium",
                            OfficialNameTrxCode = "country_name_official_bel",
                            ThreeLetterCode = "BEL",
                            TwoLetterCode = "BE"
                        },
                        new
                        {
                            CountryId = 23L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Belize",
                            NameTrxCode = "country_name_blz",
                            NumberCode = 84,
                            OfficialName = "Belize",
                            OfficialNameTrxCode = "country_name_official_blz",
                            ThreeLetterCode = "BLZ",
                            TwoLetterCode = "BZ"
                        },
                        new
                        {
                            CountryId = 24L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Benin",
                            NameTrxCode = "country_name_ben",
                            NumberCode = 204,
                            OfficialName = "The Republic of Benin",
                            OfficialNameTrxCode = "country_name_official_ben",
                            ThreeLetterCode = "BEN",
                            TwoLetterCode = "BJ"
                        },
                        new
                        {
                            CountryId = 25L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Bermuda",
                            NameTrxCode = "country_name_bmu",
                            NumberCode = 60,
                            OfficialName = "Bermuda",
                            OfficialNameTrxCode = "country_name_official_bmu",
                            ThreeLetterCode = "BMU",
                            TwoLetterCode = "BM"
                        },
                        new
                        {
                            CountryId = 26L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Bhutan",
                            NameTrxCode = "country_name_btn",
                            NumberCode = 64,
                            OfficialName = "The Kingdom of Bhutan",
                            OfficialNameTrxCode = "country_name_official_btn",
                            ThreeLetterCode = "BTN",
                            TwoLetterCode = "BT"
                        },
                        new
                        {
                            CountryId = 27L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Bolivia",
                            NameTrxCode = "country_name_bol",
                            NumberCode = 68,
                            OfficialName = "The Plurinational State of Bolivia",
                            OfficialNameTrxCode = "country_name_official_bol",
                            ThreeLetterCode = "BOL",
                            TwoLetterCode = "BO"
                        },
                        new
                        {
                            CountryId = 28L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Bonaire, Sint Eustatius and Saba",
                            NameTrxCode = "country_name_bes",
                            NumberCode = 535,
                            OfficialName = "Bonaire, Sint Eustatius and Saba",
                            OfficialNameTrxCode = "country_name_official_bes",
                            ThreeLetterCode = "BES",
                            TwoLetterCode = "BQ"
                        },
                        new
                        {
                            CountryId = 29L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Bosnia and Herzegovina",
                            NameTrxCode = "country_name_bih",
                            NumberCode = 70,
                            OfficialName = "Bosnia and Herzegovina",
                            OfficialNameTrxCode = "country_name_official_bih",
                            ThreeLetterCode = "BIH",
                            TwoLetterCode = "BA"
                        },
                        new
                        {
                            CountryId = 30L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Botswana",
                            NameTrxCode = "country_name_bwa",
                            NumberCode = 72,
                            OfficialName = "The Republic of Botswana",
                            OfficialNameTrxCode = "country_name_official_bwa",
                            ThreeLetterCode = "BWA",
                            TwoLetterCode = "BW"
                        },
                        new
                        {
                            CountryId = 31L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Bouvet Island",
                            NameTrxCode = "country_name_bvt",
                            NumberCode = 74,
                            OfficialName = "Bouvet Island",
                            OfficialNameTrxCode = "country_name_official_bvt",
                            ThreeLetterCode = "BVT",
                            TwoLetterCode = "BV"
                        },
                        new
                        {
                            CountryId = 32L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Brazil",
                            NameTrxCode = "country_name_bra",
                            NumberCode = 76,
                            OfficialName = "The Federative Republic of Brazil",
                            OfficialNameTrxCode = "country_name_official_bra",
                            ThreeLetterCode = "BRA",
                            TwoLetterCode = "BR"
                        },
                        new
                        {
                            CountryId = 33L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "British Indian Ocean Territory",
                            NameTrxCode = "country_name_iot",
                            NumberCode = 86,
                            OfficialName = "The British Indian Ocean Territory",
                            OfficialNameTrxCode = "country_name_official_iot",
                            ThreeLetterCode = "IOT",
                            TwoLetterCode = "IO"
                        },
                        new
                        {
                            CountryId = 34L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Brunei Darussalam",
                            NameTrxCode = "country_name_brn",
                            NumberCode = 96,
                            OfficialName = "The Nation of Brunei, the Abode of Peace",
                            OfficialNameTrxCode = "country_name_official_brn",
                            ThreeLetterCode = "BRN",
                            TwoLetterCode = "BN"
                        },
                        new
                        {
                            CountryId = 35L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Bulgaria",
                            NameTrxCode = "country_name_bgr",
                            NumberCode = 100,
                            OfficialName = "The Republic of Bulgaria",
                            OfficialNameTrxCode = "country_name_official_bgr",
                            ThreeLetterCode = "BGR",
                            TwoLetterCode = "BG"
                        },
                        new
                        {
                            CountryId = 36L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Burkina Faso",
                            NameTrxCode = "country_name_bfa",
                            NumberCode = 854,
                            OfficialName = "Burkina Faso",
                            OfficialNameTrxCode = "country_name_official_bfa",
                            ThreeLetterCode = "BFA",
                            TwoLetterCode = "BF"
                        },
                        new
                        {
                            CountryId = 37L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Burundi",
                            NameTrxCode = "country_name_bdi",
                            NumberCode = 108,
                            OfficialName = "The Republic of Burundi",
                            OfficialNameTrxCode = "country_name_official_bdi",
                            ThreeLetterCode = "BDI",
                            TwoLetterCode = "BI"
                        },
                        new
                        {
                            CountryId = 38L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Cabo Verde",
                            NameTrxCode = "country_name_cpv",
                            NumberCode = 132,
                            OfficialName = "The Republic of Cabo Verde",
                            OfficialNameTrxCode = "country_name_official_cpv",
                            ThreeLetterCode = "CPV",
                            TwoLetterCode = "CV"
                        },
                        new
                        {
                            CountryId = 39L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Cambodia",
                            NameTrxCode = "country_name_khm",
                            NumberCode = 116,
                            OfficialName = "The Kingdom of Cambodia",
                            OfficialNameTrxCode = "country_name_official_khm",
                            ThreeLetterCode = "KHM",
                            TwoLetterCode = "KH"
                        },
                        new
                        {
                            CountryId = 40L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Cameroon",
                            NameTrxCode = "country_name_cmr",
                            NumberCode = 120,
                            OfficialName = "The Republic of Cameroon",
                            OfficialNameTrxCode = "country_name_official_cmr",
                            ThreeLetterCode = "CMR",
                            TwoLetterCode = "CM"
                        },
                        new
                        {
                            CountryId = 41L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Canada",
                            NameTrxCode = "country_name_can",
                            NumberCode = 124,
                            OfficialName = "Canada",
                            OfficialNameTrxCode = "country_name_official_can",
                            ThreeLetterCode = "CAN",
                            TwoLetterCode = "CA"
                        },
                        new
                        {
                            CountryId = 42L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Cayman Islands",
                            NameTrxCode = "country_name_cym",
                            NumberCode = 136,
                            OfficialName = "The Cayman Islands",
                            OfficialNameTrxCode = "country_name_official_cym",
                            ThreeLetterCode = "CYM",
                            TwoLetterCode = "KY"
                        },
                        new
                        {
                            CountryId = 43L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Central African Republic",
                            NameTrxCode = "country_name_caf",
                            NumberCode = 140,
                            OfficialName = "The Central African Republic",
                            OfficialNameTrxCode = "country_name_official_caf",
                            ThreeLetterCode = "CAF",
                            TwoLetterCode = "CF"
                        },
                        new
                        {
                            CountryId = 44L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Chad",
                            NameTrxCode = "country_name_tcd",
                            NumberCode = 148,
                            OfficialName = "The Republic of Chad",
                            OfficialNameTrxCode = "country_name_official_tcd",
                            ThreeLetterCode = "TCD",
                            TwoLetterCode = "TD"
                        },
                        new
                        {
                            CountryId = 45L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Chile",
                            NameTrxCode = "country_name_chl",
                            NumberCode = 152,
                            OfficialName = "The Republic of Chile",
                            OfficialNameTrxCode = "country_name_official_chl",
                            ThreeLetterCode = "CHL",
                            TwoLetterCode = "CL"
                        },
                        new
                        {
                            CountryId = 46L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "China",
                            NameTrxCode = "country_name_chn",
                            NumberCode = 156,
                            OfficialName = "The People's Republic of China",
                            OfficialNameTrxCode = "country_name_official_chn",
                            ThreeLetterCode = "CHN",
                            TwoLetterCode = "CN"
                        },
                        new
                        {
                            CountryId = 47L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Christmas Island",
                            NameTrxCode = "country_name_cxr",
                            NumberCode = 162,
                            OfficialName = "The Territory of Christmas Island",
                            OfficialNameTrxCode = "country_name_official_cxr",
                            ThreeLetterCode = "CXR",
                            TwoLetterCode = "CX"
                        },
                        new
                        {
                            CountryId = 48L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Cocos (Keeling) Islands",
                            NameTrxCode = "country_name_cck",
                            NumberCode = 166,
                            OfficialName = "The Territory of Cocos (Keeling) Islands",
                            OfficialNameTrxCode = "country_name_official_cck",
                            ThreeLetterCode = "CCK",
                            TwoLetterCode = "CC"
                        },
                        new
                        {
                            CountryId = 49L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Colombia",
                            NameTrxCode = "country_name_col",
                            NumberCode = 170,
                            OfficialName = "The Republic of Colombia",
                            OfficialNameTrxCode = "country_name_official_col",
                            ThreeLetterCode = "COL",
                            TwoLetterCode = "CO"
                        },
                        new
                        {
                            CountryId = 50L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Comoros",
                            NameTrxCode = "country_name_com",
                            NumberCode = 174,
                            OfficialName = "The Union of the Comoros",
                            OfficialNameTrxCode = "country_name_official_com",
                            ThreeLetterCode = "COM",
                            TwoLetterCode = "KM"
                        },
                        new
                        {
                            CountryId = 51L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Congo (Kinshasa)",
                            NameTrxCode = "country_name_cod",
                            NumberCode = 180,
                            OfficialName = "The Democratic Republic of the Congo",
                            OfficialNameTrxCode = "country_name_official_cod",
                            ThreeLetterCode = "COD",
                            TwoLetterCode = "CD"
                        },
                        new
                        {
                            CountryId = 52L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Congo (Brazzaville)",
                            NameTrxCode = "country_name_cog",
                            NumberCode = 178,
                            OfficialName = "The Republic of the Congo",
                            OfficialNameTrxCode = "country_name_official_cog",
                            ThreeLetterCode = "COG",
                            TwoLetterCode = "CG"
                        },
                        new
                        {
                            CountryId = 53L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Cook Islands",
                            NameTrxCode = "country_name_cok",
                            NumberCode = 184,
                            OfficialName = "The Cook Islands",
                            OfficialNameTrxCode = "country_name_official_cok",
                            ThreeLetterCode = "COK",
                            TwoLetterCode = "CK"
                        },
                        new
                        {
                            CountryId = 54L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Costa Rica",
                            NameTrxCode = "country_name_cri",
                            NumberCode = 188,
                            OfficialName = "The Republic of Costa Rica",
                            OfficialNameTrxCode = "country_name_official_cri",
                            ThreeLetterCode = "CRI",
                            TwoLetterCode = "CR"
                        },
                        new
                        {
                            CountryId = 55L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Côte d'Ivoire",
                            NameTrxCode = "country_name_civ",
                            NumberCode = 384,
                            OfficialName = "The Republic of Côte d'Ivoire",
                            OfficialNameTrxCode = "country_name_official_civ",
                            ThreeLetterCode = "CIV",
                            TwoLetterCode = "CI"
                        },
                        new
                        {
                            CountryId = 56L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Croatia",
                            NameTrxCode = "country_name_hrv",
                            NumberCode = 191,
                            OfficialName = "The Republic of Croatia",
                            OfficialNameTrxCode = "country_name_official_hrv",
                            ThreeLetterCode = "HRV",
                            TwoLetterCode = "HR"
                        },
                        new
                        {
                            CountryId = 57L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Cuba",
                            NameTrxCode = "country_name_cub",
                            NumberCode = 192,
                            OfficialName = "The Republic of Cuba",
                            OfficialNameTrxCode = "country_name_official_cub",
                            ThreeLetterCode = "CUB",
                            TwoLetterCode = "CU"
                        },
                        new
                        {
                            CountryId = 58L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Curaçao",
                            NameTrxCode = "country_name_cuw",
                            NumberCode = 531,
                            OfficialName = "The Country of Curaçao",
                            OfficialNameTrxCode = "country_name_official_cuw",
                            ThreeLetterCode = "CUW",
                            TwoLetterCode = "CW"
                        },
                        new
                        {
                            CountryId = 59L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Cyprus",
                            NameTrxCode = "country_name_cyp",
                            NumberCode = 196,
                            OfficialName = "The Republic of Cyprus",
                            OfficialNameTrxCode = "country_name_official_cyp",
                            ThreeLetterCode = "CYP",
                            TwoLetterCode = "CY"
                        },
                        new
                        {
                            CountryId = 60L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Czechia",
                            NameTrxCode = "country_name_cze",
                            NumberCode = 203,
                            OfficialName = "The Czech Republic",
                            OfficialNameTrxCode = "country_name_official_cze",
                            ThreeLetterCode = "CZE",
                            TwoLetterCode = "CZ"
                        },
                        new
                        {
                            CountryId = 61L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Denmark",
                            NameTrxCode = "country_name_dnk",
                            NumberCode = 208,
                            OfficialName = "The Kingdom of Denmark",
                            OfficialNameTrxCode = "country_name_official_dnk",
                            ThreeLetterCode = "DNK",
                            TwoLetterCode = "DK"
                        },
                        new
                        {
                            CountryId = 62L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Djibouti",
                            NameTrxCode = "country_name_dji",
                            NumberCode = 262,
                            OfficialName = "The Republic of Djibouti",
                            OfficialNameTrxCode = "country_name_official_dji",
                            ThreeLetterCode = "DJI",
                            TwoLetterCode = "DJ"
                        },
                        new
                        {
                            CountryId = 63L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Dominica",
                            NameTrxCode = "country_name_dma",
                            NumberCode = 212,
                            OfficialName = "The Commonwealth of Dominica",
                            OfficialNameTrxCode = "country_name_official_dma",
                            ThreeLetterCode = "DMA",
                            TwoLetterCode = "DM"
                        },
                        new
                        {
                            CountryId = 64L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Dominican Republic",
                            NameTrxCode = "country_name_dom",
                            NumberCode = 214,
                            OfficialName = "The Dominican Republic",
                            OfficialNameTrxCode = "country_name_official_dom",
                            ThreeLetterCode = "DOM",
                            TwoLetterCode = "DO"
                        },
                        new
                        {
                            CountryId = 65L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Ecuador",
                            NameTrxCode = "country_name_ecu",
                            NumberCode = 218,
                            OfficialName = "The Republic of Ecuador",
                            OfficialNameTrxCode = "country_name_official_ecu",
                            ThreeLetterCode = "ECU",
                            TwoLetterCode = "EC"
                        },
                        new
                        {
                            CountryId = 66L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Egypt",
                            NameTrxCode = "country_name_egy",
                            NumberCode = 818,
                            OfficialName = "The Arab Republic of Egypt",
                            OfficialNameTrxCode = "country_name_official_egy",
                            ThreeLetterCode = "EGY",
                            TwoLetterCode = "EG"
                        },
                        new
                        {
                            CountryId = 67L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "El Salvador",
                            NameTrxCode = "country_name_slv",
                            NumberCode = 222,
                            OfficialName = "The Republic of El Salvador",
                            OfficialNameTrxCode = "country_name_official_slv",
                            ThreeLetterCode = "SLV",
                            TwoLetterCode = "SV"
                        },
                        new
                        {
                            CountryId = 68L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Equatorial Guinea",
                            NameTrxCode = "country_name_gnq",
                            NumberCode = 226,
                            OfficialName = "The Republic of Equatorial Guinea",
                            OfficialNameTrxCode = "country_name_official_gnq",
                            ThreeLetterCode = "GNQ",
                            TwoLetterCode = "GQ"
                        },
                        new
                        {
                            CountryId = 69L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Eritrea",
                            NameTrxCode = "country_name_eri",
                            NumberCode = 232,
                            OfficialName = "The State of Eritrea",
                            OfficialNameTrxCode = "country_name_official_eri",
                            ThreeLetterCode = "ERI",
                            TwoLetterCode = "ER"
                        },
                        new
                        {
                            CountryId = 70L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Estonia",
                            NameTrxCode = "country_name_est",
                            NumberCode = 233,
                            OfficialName = "The Republic of Estonia",
                            OfficialNameTrxCode = "country_name_official_est",
                            ThreeLetterCode = "EST",
                            TwoLetterCode = "EE"
                        },
                        new
                        {
                            CountryId = 71L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Eswatini",
                            NameTrxCode = "country_name_swz",
                            NumberCode = 748,
                            OfficialName = "The Kingdom of Eswatini",
                            OfficialNameTrxCode = "country_name_official_swz",
                            ThreeLetterCode = "SWZ",
                            TwoLetterCode = "SZ"
                        },
                        new
                        {
                            CountryId = 72L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Ethiopia",
                            NameTrxCode = "country_name_eth",
                            NumberCode = 231,
                            OfficialName = "The Federal Democratic Republic of Ethiopia",
                            OfficialNameTrxCode = "country_name_official_eth",
                            ThreeLetterCode = "ETH",
                            TwoLetterCode = "ET"
                        },
                        new
                        {
                            CountryId = 73L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Falkland Islands",
                            NameTrxCode = "country_name_flk",
                            NumberCode = 238,
                            OfficialName = "The Falkland Islands",
                            OfficialNameTrxCode = "country_name_official_flk",
                            ThreeLetterCode = "FLK",
                            TwoLetterCode = "FK"
                        },
                        new
                        {
                            CountryId = 74L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Faroe Islands",
                            NameTrxCode = "country_name_fro",
                            NumberCode = 234,
                            OfficialName = "The Faroe Islands",
                            OfficialNameTrxCode = "country_name_official_fro",
                            ThreeLetterCode = "FRO",
                            TwoLetterCode = "FO"
                        },
                        new
                        {
                            CountryId = 75L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Fiji",
                            NameTrxCode = "country_name_fji",
                            NumberCode = 242,
                            OfficialName = "The Republic of Fiji",
                            OfficialNameTrxCode = "country_name_official_fji",
                            ThreeLetterCode = "FJI",
                            TwoLetterCode = "FJ"
                        },
                        new
                        {
                            CountryId = 76L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Finland",
                            NameTrxCode = "country_name_fin",
                            NumberCode = 246,
                            OfficialName = "The Republic of Finland",
                            OfficialNameTrxCode = "country_name_official_fin",
                            ThreeLetterCode = "FIN",
                            TwoLetterCode = "FI"
                        },
                        new
                        {
                            CountryId = 77L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "France",
                            NameTrxCode = "country_name_fra",
                            NumberCode = 250,
                            OfficialName = "The French Republic",
                            OfficialNameTrxCode = "country_name_official_fra",
                            ThreeLetterCode = "FRA",
                            TwoLetterCode = "FR"
                        },
                        new
                        {
                            CountryId = 78L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "French Guiana",
                            NameTrxCode = "country_name_guf",
                            NumberCode = 254,
                            OfficialName = "Guyane",
                            OfficialNameTrxCode = "country_name_official_guf",
                            ThreeLetterCode = "GUF",
                            TwoLetterCode = "GF"
                        },
                        new
                        {
                            CountryId = 79L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "French Polynesia",
                            NameTrxCode = "country_name_pyf",
                            NumberCode = 258,
                            OfficialName = "French Polynesia",
                            OfficialNameTrxCode = "country_name_official_pyf",
                            ThreeLetterCode = "PYF",
                            TwoLetterCode = "PF"
                        },
                        new
                        {
                            CountryId = 80L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "French Southern Territories",
                            NameTrxCode = "country_name_atf",
                            NumberCode = 260,
                            OfficialName = "The French Southern and Antarctic Lands",
                            OfficialNameTrxCode = "country_name_official_atf",
                            ThreeLetterCode = "ATF",
                            TwoLetterCode = "TF"
                        },
                        new
                        {
                            CountryId = 81L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Gabon",
                            NameTrxCode = "country_name_gab",
                            NumberCode = 266,
                            OfficialName = "The Gabonese Republic",
                            OfficialNameTrxCode = "country_name_official_gab",
                            ThreeLetterCode = "GAB",
                            TwoLetterCode = "GA"
                        },
                        new
                        {
                            CountryId = 82L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Gambia",
                            NameTrxCode = "country_name_gmb",
                            NumberCode = 270,
                            OfficialName = "The Republic of The Gambia",
                            OfficialNameTrxCode = "country_name_official_gmb",
                            ThreeLetterCode = "GMB",
                            TwoLetterCode = "GM"
                        },
                        new
                        {
                            CountryId = 83L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Georgia",
                            NameTrxCode = "country_name_geo",
                            NumberCode = 268,
                            OfficialName = "Georgia",
                            OfficialNameTrxCode = "country_name_official_geo",
                            ThreeLetterCode = "GEO",
                            TwoLetterCode = "GE"
                        },
                        new
                        {
                            CountryId = 84L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Germany",
                            NameTrxCode = "country_name_deu",
                            NumberCode = 276,
                            OfficialName = "The Federal Republic of Germany",
                            OfficialNameTrxCode = "country_name_official_deu",
                            ThreeLetterCode = "DEU",
                            TwoLetterCode = "DE"
                        },
                        new
                        {
                            CountryId = 85L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Ghana",
                            NameTrxCode = "country_name_gha",
                            NumberCode = 288,
                            OfficialName = "The Republic of Ghana",
                            OfficialNameTrxCode = "country_name_official_gha",
                            ThreeLetterCode = "GHA",
                            TwoLetterCode = "GH"
                        },
                        new
                        {
                            CountryId = 86L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Gibraltar",
                            NameTrxCode = "country_name_gib",
                            NumberCode = 292,
                            OfficialName = "Gibraltar",
                            OfficialNameTrxCode = "country_name_official_gib",
                            ThreeLetterCode = "GIB",
                            TwoLetterCode = "GI"
                        },
                        new
                        {
                            CountryId = 87L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Greece",
                            NameTrxCode = "country_name_grc",
                            NumberCode = 300,
                            OfficialName = "The Hellenic Republic",
                            OfficialNameTrxCode = "country_name_official_grc",
                            ThreeLetterCode = "GRC",
                            TwoLetterCode = "GR"
                        },
                        new
                        {
                            CountryId = 88L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Greenland",
                            NameTrxCode = "country_name_grl",
                            NumberCode = 304,
                            OfficialName = "Kalaallit Nunaat",
                            OfficialNameTrxCode = "country_name_official_grl",
                            ThreeLetterCode = "GRL",
                            TwoLetterCode = "GL"
                        },
                        new
                        {
                            CountryId = 89L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Grenada",
                            NameTrxCode = "country_name_grd",
                            NumberCode = 308,
                            OfficialName = "Grenada",
                            OfficialNameTrxCode = "country_name_official_grd",
                            ThreeLetterCode = "GRD",
                            TwoLetterCode = "GD"
                        },
                        new
                        {
                            CountryId = 90L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Guadeloupe",
                            NameTrxCode = "country_name_glp",
                            NumberCode = 312,
                            OfficialName = "Guadeloupe",
                            OfficialNameTrxCode = "country_name_official_glp",
                            ThreeLetterCode = "GLP",
                            TwoLetterCode = "GP"
                        },
                        new
                        {
                            CountryId = 91L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Guam",
                            NameTrxCode = "country_name_gum",
                            NumberCode = 316,
                            OfficialName = "The Territory of Guam",
                            OfficialNameTrxCode = "country_name_official_gum",
                            ThreeLetterCode = "GUM",
                            TwoLetterCode = "GU"
                        },
                        new
                        {
                            CountryId = 92L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Guatemala",
                            NameTrxCode = "country_name_gtm",
                            NumberCode = 320,
                            OfficialName = "The Republic of Guatemala",
                            OfficialNameTrxCode = "country_name_official_gtm",
                            ThreeLetterCode = "GTM",
                            TwoLetterCode = "GT"
                        },
                        new
                        {
                            CountryId = 93L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Guernsey",
                            NameTrxCode = "country_name_ggy",
                            NumberCode = 831,
                            OfficialName = "The Bailiwick of Guernsey",
                            OfficialNameTrxCode = "country_name_official_ggy",
                            ThreeLetterCode = "GGY",
                            TwoLetterCode = "GG"
                        },
                        new
                        {
                            CountryId = 94L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Guinea",
                            NameTrxCode = "country_name_gin",
                            NumberCode = 324,
                            OfficialName = "The Republic of Guinea",
                            OfficialNameTrxCode = "country_name_official_gin",
                            ThreeLetterCode = "GIN",
                            TwoLetterCode = "GN"
                        },
                        new
                        {
                            CountryId = 95L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Guinea-Bissau",
                            NameTrxCode = "country_name_gnb",
                            NumberCode = 624,
                            OfficialName = "The Republic of Guinea-Bissau",
                            OfficialNameTrxCode = "country_name_official_gnb",
                            ThreeLetterCode = "GNB",
                            TwoLetterCode = "GW"
                        },
                        new
                        {
                            CountryId = 96L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Guyana",
                            NameTrxCode = "country_name_guy",
                            NumberCode = 328,
                            OfficialName = "The Co-operative Republic of Guyana",
                            OfficialNameTrxCode = "country_name_official_guy",
                            ThreeLetterCode = "GUY",
                            TwoLetterCode = "GY"
                        },
                        new
                        {
                            CountryId = 97L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Haiti",
                            NameTrxCode = "country_name_hti",
                            NumberCode = 332,
                            OfficialName = "The Republic of Haiti",
                            OfficialNameTrxCode = "country_name_official_hti",
                            ThreeLetterCode = "HTI",
                            TwoLetterCode = "HT"
                        },
                        new
                        {
                            CountryId = 98L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Heard Island and McDonald Islands",
                            NameTrxCode = "country_name_hmd",
                            NumberCode = 334,
                            OfficialName = "The Territory of Heard Island and McDonald Islands",
                            OfficialNameTrxCode = "country_name_official_hmd",
                            ThreeLetterCode = "HMD",
                            TwoLetterCode = "HM"
                        },
                        new
                        {
                            CountryId = 99L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Vatican City",
                            NameTrxCode = "country_name_vat",
                            NumberCode = 336,
                            OfficialName = "Vatican City",
                            OfficialNameTrxCode = "country_name_official_vat",
                            ThreeLetterCode = "VAT",
                            TwoLetterCode = "VA"
                        },
                        new
                        {
                            CountryId = 100L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Honduras",
                            NameTrxCode = "country_name_hnd",
                            NumberCode = 340,
                            OfficialName = "The Republic of Honduras",
                            OfficialNameTrxCode = "country_name_official_hnd",
                            ThreeLetterCode = "HND",
                            TwoLetterCode = "HN"
                        },
                        new
                        {
                            CountryId = 101L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Hong Kong",
                            NameTrxCode = "country_name_hkg",
                            NumberCode = 344,
                            OfficialName = "The Hong Kong Special Administrative Region of China",
                            OfficialNameTrxCode = "country_name_official_hkg",
                            ThreeLetterCode = "HKG",
                            TwoLetterCode = "HK"
                        },
                        new
                        {
                            CountryId = 102L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Hungary",
                            NameTrxCode = "country_name_hun",
                            NumberCode = 348,
                            OfficialName = "Hungary",
                            OfficialNameTrxCode = "country_name_official_hun",
                            ThreeLetterCode = "HUN",
                            TwoLetterCode = "HU"
                        },
                        new
                        {
                            CountryId = 103L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Iceland",
                            NameTrxCode = "country_name_isl",
                            NumberCode = 352,
                            OfficialName = "Iceland",
                            OfficialNameTrxCode = "country_name_official_isl",
                            ThreeLetterCode = "ISL",
                            TwoLetterCode = "IS"
                        },
                        new
                        {
                            CountryId = 104L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "India",
                            NameTrxCode = "country_name_ind",
                            NumberCode = 356,
                            OfficialName = "The Republic of India",
                            OfficialNameTrxCode = "country_name_official_ind",
                            ThreeLetterCode = "IND",
                            TwoLetterCode = "IN"
                        },
                        new
                        {
                            CountryId = 105L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Indonesia",
                            NameTrxCode = "country_name_idn",
                            NumberCode = 360,
                            OfficialName = "The Republic of Indonesia",
                            OfficialNameTrxCode = "country_name_official_idn",
                            ThreeLetterCode = "IDN",
                            TwoLetterCode = "ID"
                        },
                        new
                        {
                            CountryId = 106L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Iran",
                            NameTrxCode = "country_name_irn",
                            NumberCode = 364,
                            OfficialName = "The Islamic Republic of Iran",
                            OfficialNameTrxCode = "country_name_official_irn",
                            ThreeLetterCode = "IRN",
                            TwoLetterCode = "IR"
                        },
                        new
                        {
                            CountryId = 107L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Iraq",
                            NameTrxCode = "country_name_irq",
                            NumberCode = 368,
                            OfficialName = "The Republic of Iraq",
                            OfficialNameTrxCode = "country_name_official_irq",
                            ThreeLetterCode = "IRQ",
                            TwoLetterCode = "IQ"
                        },
                        new
                        {
                            CountryId = 108L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Ireland",
                            NameTrxCode = "country_name_irl",
                            NumberCode = 372,
                            OfficialName = "Ireland",
                            OfficialNameTrxCode = "country_name_official_irl",
                            ThreeLetterCode = "IRL",
                            TwoLetterCode = "IE"
                        },
                        new
                        {
                            CountryId = 109L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Isle of Man",
                            NameTrxCode = "country_name_imn",
                            NumberCode = 833,
                            OfficialName = "The Isle of Man",
                            OfficialNameTrxCode = "country_name_official_imn",
                            ThreeLetterCode = "IMN",
                            TwoLetterCode = "IM"
                        },
                        new
                        {
                            CountryId = 110L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Israel",
                            NameTrxCode = "country_name_isr",
                            NumberCode = 376,
                            OfficialName = "The State of Israel",
                            OfficialNameTrxCode = "country_name_official_isr",
                            ThreeLetterCode = "ISR",
                            TwoLetterCode = "IL"
                        },
                        new
                        {
                            CountryId = 111L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Italy",
                            NameTrxCode = "country_name_ita",
                            NumberCode = 380,
                            OfficialName = "The Italian Republic",
                            OfficialNameTrxCode = "country_name_official_ita",
                            ThreeLetterCode = "ITA",
                            TwoLetterCode = "IT"
                        },
                        new
                        {
                            CountryId = 112L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Jamaica",
                            NameTrxCode = "country_name_jam",
                            NumberCode = 388,
                            OfficialName = "Jamaica",
                            OfficialNameTrxCode = "country_name_official_jam",
                            ThreeLetterCode = "JAM",
                            TwoLetterCode = "JM"
                        },
                        new
                        {
                            CountryId = 113L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Japan",
                            NameTrxCode = "country_name_jpn",
                            NumberCode = 392,
                            OfficialName = "Japan",
                            OfficialNameTrxCode = "country_name_official_jpn",
                            ThreeLetterCode = "JPN",
                            TwoLetterCode = "JP"
                        },
                        new
                        {
                            CountryId = 114L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Jersey",
                            NameTrxCode = "country_name_jey",
                            NumberCode = 832,
                            OfficialName = "The Bailiwick of Jersey",
                            OfficialNameTrxCode = "country_name_official_jey",
                            ThreeLetterCode = "JEY",
                            TwoLetterCode = "JE"
                        },
                        new
                        {
                            CountryId = 115L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Jordan",
                            NameTrxCode = "country_name_jor",
                            NumberCode = 400,
                            OfficialName = "The Hashemite Kingdom of Jordan",
                            OfficialNameTrxCode = "country_name_official_jor",
                            ThreeLetterCode = "JOR",
                            TwoLetterCode = "JO"
                        },
                        new
                        {
                            CountryId = 116L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Kazakhstan",
                            NameTrxCode = "country_name_kaz",
                            NumberCode = 398,
                            OfficialName = "The Republic of Kazakhstan",
                            OfficialNameTrxCode = "country_name_official_kaz",
                            ThreeLetterCode = "KAZ",
                            TwoLetterCode = "KZ"
                        },
                        new
                        {
                            CountryId = 117L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Kenya",
                            NameTrxCode = "country_name_ken",
                            NumberCode = 404,
                            OfficialName = "The Republic of Kenya",
                            OfficialNameTrxCode = "country_name_official_ken",
                            ThreeLetterCode = "KEN",
                            TwoLetterCode = "KE"
                        },
                        new
                        {
                            CountryId = 118L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Kiribati",
                            NameTrxCode = "country_name_kir",
                            NumberCode = 296,
                            OfficialName = "The Republic of Kiribati",
                            OfficialNameTrxCode = "country_name_official_kir",
                            ThreeLetterCode = "KIR",
                            TwoLetterCode = "KI"
                        },
                        new
                        {
                            CountryId = 119L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "NorthKorea",
                            NameTrxCode = "country_name_prk",
                            NumberCode = 408,
                            OfficialName = "The Democratic People's Republic of Korea",
                            OfficialNameTrxCode = "country_name_official_prk",
                            ThreeLetterCode = "PRK",
                            TwoLetterCode = "KP"
                        },
                        new
                        {
                            CountryId = 120L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "South Korea",
                            NameTrxCode = "country_name_kor",
                            NumberCode = 410,
                            OfficialName = "The Republic of Korea",
                            OfficialNameTrxCode = "country_name_official_kor",
                            ThreeLetterCode = "KOR",
                            TwoLetterCode = "KR"
                        },
                        new
                        {
                            CountryId = 121L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Kuwait",
                            NameTrxCode = "country_name_kwt",
                            NumberCode = 414,
                            OfficialName = "The State of Kuwait",
                            OfficialNameTrxCode = "country_name_official_kwt",
                            ThreeLetterCode = "KWT",
                            TwoLetterCode = "KW"
                        },
                        new
                        {
                            CountryId = 122L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Kyrgyzstan",
                            NameTrxCode = "country_name_kgz",
                            NumberCode = 417,
                            OfficialName = "The Kyrgyz Republic",
                            OfficialNameTrxCode = "country_name_official_kgz",
                            ThreeLetterCode = "KGZ",
                            TwoLetterCode = "KG"
                        },
                        new
                        {
                            CountryId = 123L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Lao People's Democratic Republic",
                            NameTrxCode = "country_name_lao",
                            NumberCode = 418,
                            OfficialName = "The Lao People's Democratic Republic",
                            OfficialNameTrxCode = "country_name_official_lao",
                            ThreeLetterCode = "LAO",
                            TwoLetterCode = "LA"
                        },
                        new
                        {
                            CountryId = 124L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Latvia",
                            NameTrxCode = "country_name_lva",
                            NumberCode = 428,
                            OfficialName = "The Republic of Latvia",
                            OfficialNameTrxCode = "country_name_official_lva",
                            ThreeLetterCode = "LVA",
                            TwoLetterCode = "LV"
                        },
                        new
                        {
                            CountryId = 125L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Lebanon",
                            NameTrxCode = "country_name_lbn",
                            NumberCode = 422,
                            OfficialName = "The Lebanese Republic",
                            OfficialNameTrxCode = "country_name_official_lbn",
                            ThreeLetterCode = "LBN",
                            TwoLetterCode = "LB"
                        },
                        new
                        {
                            CountryId = 126L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Lesotho",
                            NameTrxCode = "country_name_lso",
                            NumberCode = 426,
                            OfficialName = "The Kingdom of Lesotho",
                            OfficialNameTrxCode = "country_name_official_lso",
                            ThreeLetterCode = "LSO",
                            TwoLetterCode = "LS"
                        },
                        new
                        {
                            CountryId = 127L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Liberia",
                            NameTrxCode = "country_name_lbr",
                            NumberCode = 430,
                            OfficialName = "The Republic of Liberia",
                            OfficialNameTrxCode = "country_name_official_lbr",
                            ThreeLetterCode = "LBR",
                            TwoLetterCode = "LR"
                        },
                        new
                        {
                            CountryId = 128L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Libya",
                            NameTrxCode = "country_name_lby",
                            NumberCode = 434,
                            OfficialName = "The State of Libya",
                            OfficialNameTrxCode = "country_name_official_lby",
                            ThreeLetterCode = "LBY",
                            TwoLetterCode = "LY"
                        },
                        new
                        {
                            CountryId = 129L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Liechtenstein",
                            NameTrxCode = "country_name_lie",
                            NumberCode = 438,
                            OfficialName = "The Principality of Liechtenstein",
                            OfficialNameTrxCode = "country_name_official_lie",
                            ThreeLetterCode = "LIE",
                            TwoLetterCode = "LI"
                        },
                        new
                        {
                            CountryId = 130L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Lithuania",
                            NameTrxCode = "country_name_ltu",
                            NumberCode = 440,
                            OfficialName = "The Republic of Lithuania",
                            OfficialNameTrxCode = "country_name_official_ltu",
                            ThreeLetterCode = "LTU",
                            TwoLetterCode = "LT"
                        },
                        new
                        {
                            CountryId = 131L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Luxembourg",
                            NameTrxCode = "country_name_lux",
                            NumberCode = 442,
                            OfficialName = "The Grand Duchy of Luxembourg",
                            OfficialNameTrxCode = "country_name_official_lux",
                            ThreeLetterCode = "LUX",
                            TwoLetterCode = "LU"
                        },
                        new
                        {
                            CountryId = 132L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Macao",
                            NameTrxCode = "country_name_mac",
                            NumberCode = 446,
                            OfficialName = "The Macao Special Administrative Region of China",
                            OfficialNameTrxCode = "country_name_official_mac",
                            ThreeLetterCode = "MAC",
                            TwoLetterCode = "MO"
                        },
                        new
                        {
                            CountryId = 133L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "North Macedonia",
                            NameTrxCode = "country_name_mkd",
                            NumberCode = 807,
                            OfficialName = "The Republic of North Macedonia",
                            OfficialNameTrxCode = "country_name_official_mkd",
                            ThreeLetterCode = "MKD",
                            TwoLetterCode = "MK"
                        },
                        new
                        {
                            CountryId = 134L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Madagascar",
                            NameTrxCode = "country_name_mdg",
                            NumberCode = 450,
                            OfficialName = "The Republic of Madagascar",
                            OfficialNameTrxCode = "country_name_official_mdg",
                            ThreeLetterCode = "MDG",
                            TwoLetterCode = "MG"
                        },
                        new
                        {
                            CountryId = 135L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Malawi",
                            NameTrxCode = "country_name_mwi",
                            NumberCode = 454,
                            OfficialName = "The Republic of Malawi",
                            OfficialNameTrxCode = "country_name_official_mwi",
                            ThreeLetterCode = "MWI",
                            TwoLetterCode = "MW"
                        },
                        new
                        {
                            CountryId = 136L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Malaysia",
                            NameTrxCode = "country_name_mys",
                            NumberCode = 458,
                            OfficialName = "Malaysia",
                            OfficialNameTrxCode = "country_name_official_mys",
                            ThreeLetterCode = "MYS",
                            TwoLetterCode = "MY"
                        },
                        new
                        {
                            CountryId = 137L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Maldives",
                            NameTrxCode = "country_name_mdv",
                            NumberCode = 462,
                            OfficialName = "The Republic of Maldives",
                            OfficialNameTrxCode = "country_name_official_mdv",
                            ThreeLetterCode = "MDV",
                            TwoLetterCode = "MV"
                        },
                        new
                        {
                            CountryId = 138L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Mali",
                            NameTrxCode = "country_name_mli",
                            NumberCode = 466,
                            OfficialName = "The Republic of Mali",
                            OfficialNameTrxCode = "country_name_official_mli",
                            ThreeLetterCode = "MLI",
                            TwoLetterCode = "ML"
                        },
                        new
                        {
                            CountryId = 139L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Malta",
                            NameTrxCode = "country_name_mlt",
                            NumberCode = 470,
                            OfficialName = "The Republic of Malta",
                            OfficialNameTrxCode = "country_name_official_mlt",
                            ThreeLetterCode = "MLT",
                            TwoLetterCode = "MT"
                        },
                        new
                        {
                            CountryId = 140L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Marshall Islands",
                            NameTrxCode = "country_name_mhl",
                            NumberCode = 584,
                            OfficialName = "The Republic of the Marshall Islands",
                            OfficialNameTrxCode = "country_name_official_mhl",
                            ThreeLetterCode = "MHL",
                            TwoLetterCode = "MH"
                        },
                        new
                        {
                            CountryId = 141L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Martinique",
                            NameTrxCode = "country_name_mtq",
                            NumberCode = 474,
                            OfficialName = "Martinique",
                            OfficialNameTrxCode = "country_name_official_mtq",
                            ThreeLetterCode = "MTQ",
                            TwoLetterCode = "MQ"
                        },
                        new
                        {
                            CountryId = 142L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Mauritania",
                            NameTrxCode = "country_name_mrt",
                            NumberCode = 478,
                            OfficialName = "The Islamic Republic of Mauritania",
                            OfficialNameTrxCode = "country_name_official_mrt",
                            ThreeLetterCode = "MRT",
                            TwoLetterCode = "MR"
                        },
                        new
                        {
                            CountryId = 143L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Mauritius",
                            NameTrxCode = "country_name_mus",
                            NumberCode = 480,
                            OfficialName = "The Republic of Mauritius",
                            OfficialNameTrxCode = "country_name_official_mus",
                            ThreeLetterCode = "MUS",
                            TwoLetterCode = "MU"
                        },
                        new
                        {
                            CountryId = 144L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Mayotte",
                            NameTrxCode = "country_name_myt",
                            NumberCode = 175,
                            OfficialName = "The Department of Mayotte",
                            OfficialNameTrxCode = "country_name_official_myt",
                            ThreeLetterCode = "MYT",
                            TwoLetterCode = "YT"
                        },
                        new
                        {
                            CountryId = 145L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Mexico",
                            NameTrxCode = "country_name_mex",
                            NumberCode = 484,
                            OfficialName = "The United Mexican States",
                            OfficialNameTrxCode = "country_name_official_mex",
                            ThreeLetterCode = "MEX",
                            TwoLetterCode = "MX"
                        },
                        new
                        {
                            CountryId = 146L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Micronesia",
                            NameTrxCode = "country_name_fsm",
                            NumberCode = 583,
                            OfficialName = "The Federated States of Micronesia",
                            OfficialNameTrxCode = "country_name_official_fsm",
                            ThreeLetterCode = "FSM",
                            TwoLetterCode = "FM"
                        },
                        new
                        {
                            CountryId = 147L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Moldova",
                            NameTrxCode = "country_name_mda",
                            NumberCode = 498,
                            OfficialName = "The Republic of Moldova",
                            OfficialNameTrxCode = "country_name_official_mda",
                            ThreeLetterCode = "MDA",
                            TwoLetterCode = "MD"
                        },
                        new
                        {
                            CountryId = 148L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Monaco",
                            NameTrxCode = "country_name_mco",
                            NumberCode = 492,
                            OfficialName = "The Principality of Monaco",
                            OfficialNameTrxCode = "country_name_official_mco",
                            ThreeLetterCode = "MCO",
                            TwoLetterCode = "MC"
                        },
                        new
                        {
                            CountryId = 149L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Mongolia",
                            NameTrxCode = "country_name_mng",
                            NumberCode = 496,
                            OfficialName = "Mongolia",
                            OfficialNameTrxCode = "country_name_official_mng",
                            ThreeLetterCode = "MNG",
                            TwoLetterCode = "MN"
                        },
                        new
                        {
                            CountryId = 150L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Montenegro",
                            NameTrxCode = "country_name_mne",
                            NumberCode = 499,
                            OfficialName = "Montenegro",
                            OfficialNameTrxCode = "country_name_official_mne",
                            ThreeLetterCode = "MNE",
                            TwoLetterCode = "ME"
                        },
                        new
                        {
                            CountryId = 151L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Montserrat",
                            NameTrxCode = "country_name_msr",
                            NumberCode = 500,
                            OfficialName = "Montserrat",
                            OfficialNameTrxCode = "country_name_official_msr",
                            ThreeLetterCode = "MSR",
                            TwoLetterCode = "MS"
                        },
                        new
                        {
                            CountryId = 152L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Morocco",
                            NameTrxCode = "country_name_mar",
                            NumberCode = 504,
                            OfficialName = "The Kingdom of Morocco",
                            OfficialNameTrxCode = "country_name_official_mar",
                            ThreeLetterCode = "MAR",
                            TwoLetterCode = "MA"
                        },
                        new
                        {
                            CountryId = 153L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Mozambique",
                            NameTrxCode = "country_name_moz",
                            NumberCode = 508,
                            OfficialName = "The Republic of Mozambique",
                            OfficialNameTrxCode = "country_name_official_moz",
                            ThreeLetterCode = "MOZ",
                            TwoLetterCode = "MZ"
                        },
                        new
                        {
                            CountryId = 154L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Myanmar",
                            NameTrxCode = "country_name_mmr",
                            NumberCode = 104,
                            OfficialName = "The Republic of the Union of Myanmar",
                            OfficialNameTrxCode = "country_name_official_mmr",
                            ThreeLetterCode = "MMR",
                            TwoLetterCode = "MM"
                        },
                        new
                        {
                            CountryId = 155L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Namibia",
                            NameTrxCode = "country_name_nam",
                            NumberCode = 516,
                            OfficialName = "The Republic of Namibia",
                            OfficialNameTrxCode = "country_name_official_nam",
                            ThreeLetterCode = "NAM",
                            TwoLetterCode = "NA"
                        },
                        new
                        {
                            CountryId = 156L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Nauru",
                            NameTrxCode = "country_name_nru",
                            NumberCode = 520,
                            OfficialName = "The Republic of Nauru",
                            OfficialNameTrxCode = "country_name_official_nru",
                            ThreeLetterCode = "NRU",
                            TwoLetterCode = "NR"
                        },
                        new
                        {
                            CountryId = 157L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Nepal",
                            NameTrxCode = "country_name_npl",
                            NumberCode = 524,
                            OfficialName = "The Federal Democratic Republic of Nepal",
                            OfficialNameTrxCode = "country_name_official_npl",
                            ThreeLetterCode = "NPL",
                            TwoLetterCode = "NP"
                        },
                        new
                        {
                            CountryId = 158L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Netherlands, Kingdom of the",
                            NameTrxCode = "country_name_nld",
                            NumberCode = 528,
                            OfficialName = "The Kingdom of the Netherlands",
                            OfficialNameTrxCode = "country_name_official_nld",
                            ThreeLetterCode = "NLD",
                            TwoLetterCode = "NL"
                        },
                        new
                        {
                            CountryId = 159L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "New Caledonia",
                            NameTrxCode = "country_name_ncl",
                            NumberCode = 540,
                            OfficialName = "New Caledonia",
                            OfficialNameTrxCode = "country_name_official_ncl",
                            ThreeLetterCode = "NCL",
                            TwoLetterCode = "NC"
                        },
                        new
                        {
                            CountryId = 160L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "New Zealand",
                            NameTrxCode = "country_name_nzl",
                            NumberCode = 554,
                            OfficialName = "New Zealand",
                            OfficialNameTrxCode = "country_name_official_nzl",
                            ThreeLetterCode = "NZL",
                            TwoLetterCode = "NZ"
                        },
                        new
                        {
                            CountryId = 161L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Nicaragua",
                            NameTrxCode = "country_name_nic",
                            NumberCode = 558,
                            OfficialName = "The Republic of Nicaragua",
                            OfficialNameTrxCode = "country_name_official_nic",
                            ThreeLetterCode = "NIC",
                            TwoLetterCode = "NI"
                        },
                        new
                        {
                            CountryId = 162L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Niger",
                            NameTrxCode = "country_name_ner",
                            NumberCode = 562,
                            OfficialName = "The Republic of the Niger",
                            OfficialNameTrxCode = "country_name_official_ner",
                            ThreeLetterCode = "NER",
                            TwoLetterCode = "NE"
                        },
                        new
                        {
                            CountryId = 163L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Nigeria",
                            NameTrxCode = "country_name_nga",
                            NumberCode = 566,
                            OfficialName = "The Federal Republic of Nigeria",
                            OfficialNameTrxCode = "country_name_official_nga",
                            ThreeLetterCode = "NGA",
                            TwoLetterCode = "NG"
                        },
                        new
                        {
                            CountryId = 164L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Niue",
                            NameTrxCode = "country_name_niu",
                            NumberCode = 570,
                            OfficialName = "Niue",
                            OfficialNameTrxCode = "country_name_official_niu",
                            ThreeLetterCode = "NIU",
                            TwoLetterCode = "NU"
                        },
                        new
                        {
                            CountryId = 165L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Norfolk Island",
                            NameTrxCode = "country_name_nfk",
                            NumberCode = 574,
                            OfficialName = "The Territory of Norfolk Island",
                            OfficialNameTrxCode = "country_name_official_nfk",
                            ThreeLetterCode = "NFK",
                            TwoLetterCode = "NF"
                        },
                        new
                        {
                            CountryId = 166L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Northern Mariana Islands",
                            NameTrxCode = "country_name_mnp",
                            NumberCode = 580,
                            OfficialName = "The Commonwealth of the Northern Mariana Islands",
                            OfficialNameTrxCode = "country_name_official_mnp",
                            ThreeLetterCode = "MNP",
                            TwoLetterCode = "MP"
                        },
                        new
                        {
                            CountryId = 167L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Norway",
                            NameTrxCode = "country_name_nor",
                            NumberCode = 578,
                            OfficialName = "The Kingdom of Norway",
                            OfficialNameTrxCode = "country_name_official_nor",
                            ThreeLetterCode = "NOR",
                            TwoLetterCode = "NO"
                        },
                        new
                        {
                            CountryId = 168L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Oman",
                            NameTrxCode = "country_name_omn",
                            NumberCode = 512,
                            OfficialName = "The Sultanate of Oman",
                            OfficialNameTrxCode = "country_name_official_omn",
                            ThreeLetterCode = "OMN",
                            TwoLetterCode = "OM"
                        },
                        new
                        {
                            CountryId = 169L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Pakistan",
                            NameTrxCode = "country_name_pak",
                            NumberCode = 586,
                            OfficialName = "The Islamic Republic of Pakistan",
                            OfficialNameTrxCode = "country_name_official_pak",
                            ThreeLetterCode = "PAK",
                            TwoLetterCode = "PK"
                        },
                        new
                        {
                            CountryId = 170L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Palau",
                            NameTrxCode = "country_name_plw",
                            NumberCode = 585,
                            OfficialName = "The Republic of Palau",
                            OfficialNameTrxCode = "country_name_official_plw",
                            ThreeLetterCode = "PLW",
                            TwoLetterCode = "PW"
                        },
                        new
                        {
                            CountryId = 171L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Palestine",
                            NameTrxCode = "country_name_pse",
                            NumberCode = 275,
                            OfficialName = "The State of Palestine",
                            OfficialNameTrxCode = "country_name_official_pse",
                            ThreeLetterCode = "PSE",
                            TwoLetterCode = "PS"
                        },
                        new
                        {
                            CountryId = 172L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Panama",
                            NameTrxCode = "country_name_pan",
                            NumberCode = 591,
                            OfficialName = "The Republic of Panamá",
                            OfficialNameTrxCode = "country_name_official_pan",
                            ThreeLetterCode = "PAN",
                            TwoLetterCode = "PA"
                        },
                        new
                        {
                            CountryId = 173L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Papua New Guinea",
                            NameTrxCode = "country_name_png",
                            NumberCode = 598,
                            OfficialName = "The Independent State of Papua New Guinea",
                            OfficialNameTrxCode = "country_name_official_png",
                            ThreeLetterCode = "PNG",
                            TwoLetterCode = "PG"
                        },
                        new
                        {
                            CountryId = 174L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Paraguay",
                            NameTrxCode = "country_name_pry",
                            NumberCode = 600,
                            OfficialName = "The Republic of Paraguay",
                            OfficialNameTrxCode = "country_name_official_pry",
                            ThreeLetterCode = "PRY",
                            TwoLetterCode = "PY"
                        },
                        new
                        {
                            CountryId = 175L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Peru",
                            NameTrxCode = "country_name_per",
                            NumberCode = 604,
                            OfficialName = "The Republic of Perú",
                            OfficialNameTrxCode = "country_name_official_per",
                            ThreeLetterCode = "PER",
                            TwoLetterCode = "PE"
                        },
                        new
                        {
                            CountryId = 176L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Philippines",
                            NameTrxCode = "country_name_phl",
                            NumberCode = 608,
                            OfficialName = "The Republic of the Philippines",
                            OfficialNameTrxCode = "country_name_official_phl",
                            ThreeLetterCode = "PHL",
                            TwoLetterCode = "PH"
                        },
                        new
                        {
                            CountryId = 177L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Pitcairn",
                            NameTrxCode = "country_name_pcn",
                            NumberCode = 612,
                            OfficialName = "The Pitcairn, Henderson, Ducie and Oeno Islands",
                            OfficialNameTrxCode = "country_name_official_pcn",
                            ThreeLetterCode = "PCN",
                            TwoLetterCode = "PN"
                        },
                        new
                        {
                            CountryId = 178L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Poland",
                            NameTrxCode = "country_name_pol",
                            NumberCode = 616,
                            OfficialName = "The Republic of Poland",
                            OfficialNameTrxCode = "country_name_official_pol",
                            ThreeLetterCode = "POL",
                            TwoLetterCode = "PL"
                        },
                        new
                        {
                            CountryId = 179L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Portugal",
                            NameTrxCode = "country_name_prt",
                            NumberCode = 620,
                            OfficialName = "The Portuguese Republic",
                            OfficialNameTrxCode = "country_name_official_prt",
                            ThreeLetterCode = "PRT",
                            TwoLetterCode = "PT"
                        },
                        new
                        {
                            CountryId = 180L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Puerto Rico",
                            NameTrxCode = "country_name_pri",
                            NumberCode = 630,
                            OfficialName = "The Commonwealth of Puerto Rico",
                            OfficialNameTrxCode = "country_name_official_pri",
                            ThreeLetterCode = "PRI",
                            TwoLetterCode = "PR"
                        },
                        new
                        {
                            CountryId = 181L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Qatar",
                            NameTrxCode = "country_name_qat",
                            NumberCode = 634,
                            OfficialName = "The State of Qatar",
                            OfficialNameTrxCode = "country_name_official_qat",
                            ThreeLetterCode = "QAT",
                            TwoLetterCode = "QA"
                        },
                        new
                        {
                            CountryId = 182L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Réunion",
                            NameTrxCode = "country_name_reu",
                            NumberCode = 638,
                            OfficialName = "Réunion",
                            OfficialNameTrxCode = "country_name_official_reu",
                            ThreeLetterCode = "REU",
                            TwoLetterCode = "RE"
                        },
                        new
                        {
                            CountryId = 183L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Romania",
                            NameTrxCode = "country_name_rou",
                            NumberCode = 642,
                            OfficialName = "Romania",
                            OfficialNameTrxCode = "country_name_official_rou",
                            ThreeLetterCode = "ROU",
                            TwoLetterCode = "RO"
                        },
                        new
                        {
                            CountryId = 184L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Russia",
                            NameTrxCode = "country_name_rus",
                            NumberCode = 643,
                            OfficialName = "The Russian Federation",
                            OfficialNameTrxCode = "country_name_official_rus",
                            ThreeLetterCode = "RUS",
                            TwoLetterCode = "RU"
                        },
                        new
                        {
                            CountryId = 185L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Rwanda",
                            NameTrxCode = "country_name_rwa",
                            NumberCode = 646,
                            OfficialName = "The Republic of Rwanda",
                            OfficialNameTrxCode = "country_name_official_rwa",
                            ThreeLetterCode = "RWA",
                            TwoLetterCode = "RW"
                        },
                        new
                        {
                            CountryId = 186L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Saint Barthélemy",
                            NameTrxCode = "country_name_blm",
                            NumberCode = 652,
                            OfficialName = "The Collectivity of Saint-Barthélemy",
                            OfficialNameTrxCode = "country_name_official_blm",
                            ThreeLetterCode = "BLM",
                            TwoLetterCode = "BL"
                        },
                        new
                        {
                            CountryId = 187L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Saint Helena, Ascension and Tristan da Cunha",
                            NameTrxCode = "country_name_shn",
                            NumberCode = 654,
                            OfficialName = "Saint Helena, Ascension and Tristan da Cunha",
                            OfficialNameTrxCode = "country_name_official_shn",
                            ThreeLetterCode = "SHN",
                            TwoLetterCode = "SH"
                        },
                        new
                        {
                            CountryId = 188L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Saint Kitts and Nevis",
                            NameTrxCode = "country_name_kna",
                            NumberCode = 659,
                            OfficialName = "Saint Kitts and Nevis",
                            OfficialNameTrxCode = "country_name_official_kna",
                            ThreeLetterCode = "KNA",
                            TwoLetterCode = "KN"
                        },
                        new
                        {
                            CountryId = 189L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Saint Lucia",
                            NameTrxCode = "country_name_lca",
                            NumberCode = 662,
                            OfficialName = "Saint Lucia",
                            OfficialNameTrxCode = "country_name_official_lca",
                            ThreeLetterCode = "LCA",
                            TwoLetterCode = "LC"
                        },
                        new
                        {
                            CountryId = 190L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Saint Martin (French part)",
                            NameTrxCode = "country_name_maf",
                            NumberCode = 663,
                            OfficialName = "The Collectivity of Saint-Martin",
                            OfficialNameTrxCode = "country_name_official_maf",
                            ThreeLetterCode = "MAF",
                            TwoLetterCode = "MF"
                        },
                        new
                        {
                            CountryId = 191L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Saint Pierre and Miquelon",
                            NameTrxCode = "country_name_spm",
                            NumberCode = 666,
                            OfficialName = "The Overseas Collectivity of Saint-Pierre and Miquelon",
                            OfficialNameTrxCode = "country_name_official_spm",
                            ThreeLetterCode = "SPM",
                            TwoLetterCode = "PM"
                        },
                        new
                        {
                            CountryId = 192L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Saint Vincent and the Grenadines",
                            NameTrxCode = "country_name_vct",
                            NumberCode = 670,
                            OfficialName = "Saint Vincent and the Grenadines",
                            OfficialNameTrxCode = "country_name_official_vct",
                            ThreeLetterCode = "VCT",
                            TwoLetterCode = "VC"
                        },
                        new
                        {
                            CountryId = 193L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Samoa",
                            NameTrxCode = "country_name_wsm",
                            NumberCode = 882,
                            OfficialName = "The Independent State of Samoa",
                            OfficialNameTrxCode = "country_name_official_wsm",
                            ThreeLetterCode = "WSM",
                            TwoLetterCode = "WS"
                        },
                        new
                        {
                            CountryId = 194L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "San Marino",
                            NameTrxCode = "country_name_smr",
                            NumberCode = 674,
                            OfficialName = "The Republic of San Marino",
                            OfficialNameTrxCode = "country_name_official_smr",
                            ThreeLetterCode = "SMR",
                            TwoLetterCode = "SM"
                        },
                        new
                        {
                            CountryId = 195L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Sao Tome and Principe",
                            NameTrxCode = "country_name_stp",
                            NumberCode = 678,
                            OfficialName = "The Democratic Republic of São Tomé and Príncipe",
                            OfficialNameTrxCode = "country_name_official_stp",
                            ThreeLetterCode = "STP",
                            TwoLetterCode = "ST"
                        },
                        new
                        {
                            CountryId = 196L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Saudi Arabia",
                            NameTrxCode = "country_name_sau",
                            NumberCode = 682,
                            OfficialName = "The Kingdom of Saudi Arabia",
                            OfficialNameTrxCode = "country_name_official_sau",
                            ThreeLetterCode = "SAU",
                            TwoLetterCode = "SA"
                        },
                        new
                        {
                            CountryId = 197L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Senegal",
                            NameTrxCode = "country_name_sen",
                            NumberCode = 686,
                            OfficialName = "The Republic of Senegal",
                            OfficialNameTrxCode = "country_name_official_sen",
                            ThreeLetterCode = "SEN",
                            TwoLetterCode = "SN"
                        },
                        new
                        {
                            CountryId = 198L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Serbia",
                            NameTrxCode = "country_name_srb",
                            NumberCode = 688,
                            OfficialName = "The Republic of Serbia",
                            OfficialNameTrxCode = "country_name_official_srb",
                            ThreeLetterCode = "SRB",
                            TwoLetterCode = "RS"
                        },
                        new
                        {
                            CountryId = 199L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Seychelles",
                            NameTrxCode = "country_name_syc",
                            NumberCode = 690,
                            OfficialName = "The Republic of Seychelles",
                            OfficialNameTrxCode = "country_name_official_syc",
                            ThreeLetterCode = "SYC",
                            TwoLetterCode = "SC"
                        },
                        new
                        {
                            CountryId = 200L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Sierra Leone",
                            NameTrxCode = "country_name_sle",
                            NumberCode = 694,
                            OfficialName = "The Republic of Sierra Leone",
                            OfficialNameTrxCode = "country_name_official_sle",
                            ThreeLetterCode = "SLE",
                            TwoLetterCode = "SL"
                        },
                        new
                        {
                            CountryId = 201L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Singapore",
                            NameTrxCode = "country_name_sgp",
                            NumberCode = 702,
                            OfficialName = "The Republic of Singapore",
                            OfficialNameTrxCode = "country_name_official_sgp",
                            ThreeLetterCode = "SGP",
                            TwoLetterCode = "SG"
                        },
                        new
                        {
                            CountryId = 202L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Sint Maarten (Dutch part)",
                            NameTrxCode = "country_name_sxm",
                            NumberCode = 534,
                            OfficialName = "Sint Maarten",
                            OfficialNameTrxCode = "country_name_official_sxm",
                            ThreeLetterCode = "SXM",
                            TwoLetterCode = "SX"
                        },
                        new
                        {
                            CountryId = 203L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Slovakia",
                            NameTrxCode = "country_name_svk",
                            NumberCode = 703,
                            OfficialName = "The Slovak Republic",
                            OfficialNameTrxCode = "country_name_official_svk",
                            ThreeLetterCode = "SVK",
                            TwoLetterCode = "SK"
                        },
                        new
                        {
                            CountryId = 204L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Slovenia",
                            NameTrxCode = "country_name_svn",
                            NumberCode = 705,
                            OfficialName = "The Republic of Slovenia",
                            OfficialNameTrxCode = "country_name_official_svn",
                            ThreeLetterCode = "SVN",
                            TwoLetterCode = "SI"
                        },
                        new
                        {
                            CountryId = 205L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Solomon Islands",
                            NameTrxCode = "country_name_slb",
                            NumberCode = 90,
                            OfficialName = "The Solomon Islands",
                            OfficialNameTrxCode = "country_name_official_slb",
                            ThreeLetterCode = "SLB",
                            TwoLetterCode = "SB"
                        },
                        new
                        {
                            CountryId = 206L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Somalia",
                            NameTrxCode = "country_name_som",
                            NumberCode = 706,
                            OfficialName = "The Federal Republic of Somalia",
                            OfficialNameTrxCode = "country_name_official_som",
                            ThreeLetterCode = "SOM",
                            TwoLetterCode = "SO"
                        },
                        new
                        {
                            CountryId = 207L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "South Africa",
                            NameTrxCode = "country_name_zaf",
                            NumberCode = 710,
                            OfficialName = "The Republic of South Africa",
                            OfficialNameTrxCode = "country_name_official_zaf",
                            ThreeLetterCode = "ZAF",
                            TwoLetterCode = "ZA"
                        },
                        new
                        {
                            CountryId = 208L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "South Georgia and the South Sandwich Islands",
                            NameTrxCode = "country_name_sgs",
                            NumberCode = 239,
                            OfficialName = "South Georgia and the South Sandwich Islands",
                            OfficialNameTrxCode = "country_name_official_sgs",
                            ThreeLetterCode = "SGS",
                            TwoLetterCode = "GS"
                        },
                        new
                        {
                            CountryId = 209L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "South Sudan",
                            NameTrxCode = "country_name_ssd",
                            NumberCode = 728,
                            OfficialName = "The Republic of South Sudan",
                            OfficialNameTrxCode = "country_name_official_ssd",
                            ThreeLetterCode = "SSD",
                            TwoLetterCode = "SS"
                        },
                        new
                        {
                            CountryId = 210L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Spain",
                            NameTrxCode = "country_name_esp",
                            NumberCode = 724,
                            OfficialName = "The Kingdom of Spain",
                            OfficialNameTrxCode = "country_name_official_esp",
                            ThreeLetterCode = "ESP",
                            TwoLetterCode = "ES"
                        },
                        new
                        {
                            CountryId = 211L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Sri Lanka",
                            NameTrxCode = "country_name_lka",
                            NumberCode = 144,
                            OfficialName = "The Democratic Socialist Republic of Sri Lanka",
                            OfficialNameTrxCode = "country_name_official_lka",
                            ThreeLetterCode = "LKA",
                            TwoLetterCode = "LK"
                        },
                        new
                        {
                            CountryId = 212L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Sudan",
                            NameTrxCode = "country_name_sdn",
                            NumberCode = 729,
                            OfficialName = "The Republic of the Sudan",
                            OfficialNameTrxCode = "country_name_official_sdn",
                            ThreeLetterCode = "SDN",
                            TwoLetterCode = "SD"
                        },
                        new
                        {
                            CountryId = 213L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Suriname",
                            NameTrxCode = "country_name_sur",
                            NumberCode = 740,
                            OfficialName = "The Republic of Suriname",
                            OfficialNameTrxCode = "country_name_official_sur",
                            ThreeLetterCode = "SUR",
                            TwoLetterCode = "SR"
                        },
                        new
                        {
                            CountryId = 214L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Svalbard and Jan Mayen",
                            NameTrxCode = "country_name_sjm",
                            NumberCode = 744,
                            OfficialName = "Svalbard and Jan Mayen",
                            OfficialNameTrxCode = "country_name_official_sjm",
                            ThreeLetterCode = "SJM",
                            TwoLetterCode = "SJ"
                        },
                        new
                        {
                            CountryId = 215L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Sweden",
                            NameTrxCode = "country_name_swe",
                            NumberCode = 752,
                            OfficialName = "The Kingdom of Sweden",
                            OfficialNameTrxCode = "country_name_official_swe",
                            ThreeLetterCode = "SWE",
                            TwoLetterCode = "SE"
                        },
                        new
                        {
                            CountryId = 216L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Switzerland",
                            NameTrxCode = "country_name_che",
                            NumberCode = 756,
                            OfficialName = "The Swiss Confederation",
                            OfficialNameTrxCode = "country_name_official_che",
                            ThreeLetterCode = "CHE",
                            TwoLetterCode = "CH"
                        },
                        new
                        {
                            CountryId = 217L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Syrian Arab Republic",
                            NameTrxCode = "country_name_syr",
                            NumberCode = 760,
                            OfficialName = "The Syrian Arab Republic",
                            OfficialNameTrxCode = "country_name_official_syr",
                            ThreeLetterCode = "SYR",
                            TwoLetterCode = "SY"
                        },
                        new
                        {
                            CountryId = 218L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Taiwan (Province of China)",
                            NameTrxCode = "country_name_twn",
                            NumberCode = 158,
                            OfficialName = "The Republic of China",
                            OfficialNameTrxCode = "country_name_official_twn",
                            ThreeLetterCode = "TWN",
                            TwoLetterCode = "TW"
                        },
                        new
                        {
                            CountryId = 219L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Tajikistan",
                            NameTrxCode = "country_name_tjk",
                            NumberCode = 762,
                            OfficialName = "The Republic of Tajikistan",
                            OfficialNameTrxCode = "country_name_official_tjk",
                            ThreeLetterCode = "TJK",
                            TwoLetterCode = "TJ"
                        },
                        new
                        {
                            CountryId = 220L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Tanzania, the United Republic of",
                            NameTrxCode = "country_name_tza",
                            NumberCode = 834,
                            OfficialName = "The United Republic of Tanzania",
                            OfficialNameTrxCode = "country_name_official_tza",
                            ThreeLetterCode = "TZA",
                            TwoLetterCode = "TZ"
                        },
                        new
                        {
                            CountryId = 221L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Thailand",
                            NameTrxCode = "country_name_tha",
                            NumberCode = 764,
                            OfficialName = "The Kingdom of Thailand",
                            OfficialNameTrxCode = "country_name_official_tha",
                            ThreeLetterCode = "THA",
                            TwoLetterCode = "TH"
                        },
                        new
                        {
                            CountryId = 222L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Timor-Leste",
                            NameTrxCode = "country_name_tls",
                            NumberCode = 626,
                            OfficialName = "The Democratic Republic of Timor-Leste",
                            OfficialNameTrxCode = "country_name_official_tls",
                            ThreeLetterCode = "TLS",
                            TwoLetterCode = "TL"
                        },
                        new
                        {
                            CountryId = 223L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Togo",
                            NameTrxCode = "country_name_tgo",
                            NumberCode = 768,
                            OfficialName = "The Togolese Republic",
                            OfficialNameTrxCode = "country_name_official_tgo",
                            ThreeLetterCode = "TGO",
                            TwoLetterCode = "TG"
                        },
                        new
                        {
                            CountryId = 224L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Tokelau",
                            NameTrxCode = "country_name_tkl",
                            NumberCode = 772,
                            OfficialName = "Tokelau",
                            OfficialNameTrxCode = "country_name_official_tkl",
                            ThreeLetterCode = "TKL",
                            TwoLetterCode = "TK"
                        },
                        new
                        {
                            CountryId = 225L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Tonga",
                            NameTrxCode = "country_name_ton",
                            NumberCode = 776,
                            OfficialName = "The Kingdom of Tonga",
                            OfficialNameTrxCode = "country_name_official_ton",
                            ThreeLetterCode = "TON",
                            TwoLetterCode = "TO"
                        },
                        new
                        {
                            CountryId = 226L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Trinidad and Tobago",
                            NameTrxCode = "country_name_tto",
                            NumberCode = 780,
                            OfficialName = "The Republic of Trinidad and Tobago",
                            OfficialNameTrxCode = "country_name_official_tto",
                            ThreeLetterCode = "TTO",
                            TwoLetterCode = "TT"
                        },
                        new
                        {
                            CountryId = 227L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Tunisia",
                            NameTrxCode = "country_name_tun",
                            NumberCode = 788,
                            OfficialName = "The Republic of Tunisia",
                            OfficialNameTrxCode = "country_name_official_tun",
                            ThreeLetterCode = "TUN",
                            TwoLetterCode = "TN"
                        },
                        new
                        {
                            CountryId = 228L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Türkiye",
                            NameTrxCode = "country_name_tur",
                            NumberCode = 792,
                            OfficialName = "The Republic of Türkiye",
                            OfficialNameTrxCode = "country_name_official_tur",
                            ThreeLetterCode = "TUR",
                            TwoLetterCode = "TR"
                        },
                        new
                        {
                            CountryId = 229L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Turkmenistan",
                            NameTrxCode = "country_name_tkm",
                            NumberCode = 795,
                            OfficialName = "Turkmenistan",
                            OfficialNameTrxCode = "country_name_official_tkm",
                            ThreeLetterCode = "TKM",
                            TwoLetterCode = "TM"
                        },
                        new
                        {
                            CountryId = 230L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Turks and Caicos Islands",
                            NameTrxCode = "country_name_tca",
                            NumberCode = 796,
                            OfficialName = "The Turks and Caicos Islands",
                            OfficialNameTrxCode = "country_name_official_tca",
                            ThreeLetterCode = "TCA",
                            TwoLetterCode = "TC"
                        },
                        new
                        {
                            CountryId = 231L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Tuvalu",
                            NameTrxCode = "country_name_tuv",
                            NumberCode = 798,
                            OfficialName = "Tuvalu",
                            OfficialNameTrxCode = "country_name_official_tuv",
                            ThreeLetterCode = "TUV",
                            TwoLetterCode = "TV"
                        },
                        new
                        {
                            CountryId = 232L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Uganda",
                            NameTrxCode = "country_name_uga",
                            NumberCode = 800,
                            OfficialName = "The Republic of Uganda",
                            OfficialNameTrxCode = "country_name_official_uga",
                            ThreeLetterCode = "UGA",
                            TwoLetterCode = "UG"
                        },
                        new
                        {
                            CountryId = 233L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Ukraine",
                            NameTrxCode = "country_name_ukr",
                            NumberCode = 804,
                            OfficialName = "Ukraine",
                            OfficialNameTrxCode = "country_name_official_ukr",
                            ThreeLetterCode = "UKR",
                            TwoLetterCode = "UA"
                        },
                        new
                        {
                            CountryId = 234L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "United Arab Emirates",
                            NameTrxCode = "country_name_are",
                            NumberCode = 784,
                            OfficialName = "The United Arab Emirates",
                            OfficialNameTrxCode = "country_name_official_are",
                            ThreeLetterCode = "ARE",
                            TwoLetterCode = "AE"
                        },
                        new
                        {
                            CountryId = 235L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "United Kingdom",
                            NameTrxCode = "country_name_gbr",
                            NumberCode = 826,
                            OfficialName = "The United Kingdom of Great Britain and Northern Ireland",
                            OfficialNameTrxCode = "country_name_official_gbr",
                            ThreeLetterCode = "GBR",
                            TwoLetterCode = "GB"
                        },
                        new
                        {
                            CountryId = 236L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "United States Minor Outlying Islands",
                            NameTrxCode = "country_name_umi",
                            NumberCode = 581,
                            OfficialName = "Baker Island, Howland Island, Jarvis Island, Johnston Atoll, Kingman Reef, Midway Atoll, Navassa Island, Palmyra Atoll, and Wake Island",
                            OfficialNameTrxCode = "country_name_official_umi",
                            ThreeLetterCode = "UMI",
                            TwoLetterCode = "UM"
                        },
                        new
                        {
                            CountryId = 237L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "United States of America",
                            NameTrxCode = "country_name_usa",
                            NumberCode = 840,
                            OfficialName = "The United States of America",
                            OfficialNameTrxCode = "country_name_official_usa",
                            ThreeLetterCode = "USA",
                            TwoLetterCode = "US"
                        },
                        new
                        {
                            CountryId = 238L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Uruguay",
                            NameTrxCode = "country_name_ury",
                            NumberCode = 858,
                            OfficialName = "The Oriental Republic of Uruguay",
                            OfficialNameTrxCode = "country_name_official_ury",
                            ThreeLetterCode = "URY",
                            TwoLetterCode = "UY"
                        },
                        new
                        {
                            CountryId = 239L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Uzbekistan",
                            NameTrxCode = "country_name_uzb",
                            NumberCode = 860,
                            OfficialName = "The Republic of Uzbekistan",
                            OfficialNameTrxCode = "country_name_official_uzb",
                            ThreeLetterCode = "UZB",
                            TwoLetterCode = "UZ"
                        },
                        new
                        {
                            CountryId = 240L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Vanuatu",
                            NameTrxCode = "country_name_vut",
                            NumberCode = 548,
                            OfficialName = "The Republic of Vanuatu",
                            OfficialNameTrxCode = "country_name_official_vut",
                            ThreeLetterCode = "VUT",
                            TwoLetterCode = "VU"
                        },
                        new
                        {
                            CountryId = 241L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Venezuela",
                            NameTrxCode = "country_name_ven",
                            NumberCode = 862,
                            OfficialName = "The Bolivarian Republic of Venezuela",
                            OfficialNameTrxCode = "country_name_official_ven",
                            ThreeLetterCode = "VEN",
                            TwoLetterCode = "VE"
                        },
                        new
                        {
                            CountryId = 242L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Viet Nam",
                            NameTrxCode = "country_name_vnm",
                            NumberCode = 704,
                            OfficialName = "The Socialist Republic of Viet Nam",
                            OfficialNameTrxCode = "country_name_official_vnm",
                            ThreeLetterCode = "VNM",
                            TwoLetterCode = "VN"
                        },
                        new
                        {
                            CountryId = 243L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Virgin Islands (British)",
                            NameTrxCode = "country_name_vgb",
                            NumberCode = 92,
                            OfficialName = "The Virgin Islands",
                            OfficialNameTrxCode = "country_name_official_vgb",
                            ThreeLetterCode = "VGB",
                            TwoLetterCode = "VG"
                        },
                        new
                        {
                            CountryId = 244L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Virgin Islands (U.S.)",
                            NameTrxCode = "country_name_vir",
                            NumberCode = 850,
                            OfficialName = "The Virgin Islands of the United States",
                            OfficialNameTrxCode = "country_name_official_vir",
                            ThreeLetterCode = "VIR",
                            TwoLetterCode = "VI"
                        },
                        new
                        {
                            CountryId = 245L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Wallis and Futuna",
                            NameTrxCode = "country_name_wlf",
                            NumberCode = 876,
                            OfficialName = "The Territory of the Wallis and Futuna Islands",
                            OfficialNameTrxCode = "country_name_official_wlf",
                            ThreeLetterCode = "WLF",
                            TwoLetterCode = "WF"
                        },
                        new
                        {
                            CountryId = 246L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Western Sahara",
                            NameTrxCode = "country_name_esh",
                            NumberCode = 732,
                            OfficialName = "The Sahrawi Arab Democratic Republic",
                            OfficialNameTrxCode = "country_name_official_esh",
                            ThreeLetterCode = "ESH",
                            TwoLetterCode = "EH"
                        },
                        new
                        {
                            CountryId = 247L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Yemen",
                            NameTrxCode = "country_name_yem",
                            NumberCode = 887,
                            OfficialName = "The Republic of Yemen",
                            OfficialNameTrxCode = "country_name_official_yem",
                            ThreeLetterCode = "YEM",
                            TwoLetterCode = "YE"
                        },
                        new
                        {
                            CountryId = 248L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Zambia",
                            NameTrxCode = "country_name_zmb",
                            NumberCode = 894,
                            OfficialName = "The Republic of Zambia",
                            OfficialNameTrxCode = "country_name_official_zmb",
                            ThreeLetterCode = "ZMB",
                            TwoLetterCode = "ZM"
                        },
                        new
                        {
                            CountryId = 249L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Zimbabwe",
                            NameTrxCode = "country_name_zwe",
                            NumberCode = 716,
                            OfficialName = "The Republic of Zimbabwe",
                            OfficialNameTrxCode = "country_name_official_zwe",
                            ThreeLetterCode = "ZWE",
                            TwoLetterCode = "ZW"
                        });
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Configuration.FeatureToggle", b =>
                {
                    b.Property<Guid>("FeatureToggleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<string>("FeatureDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnOrder(2);

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsFeatureDisabled")
                        .HasColumnType("bit")
                        .HasColumnOrder(3);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.HasKey("FeatureToggleId");

                    b.HasIndex("FeatureName")
                        .IsUnique();

                    b.ToTable("FeatureToggles", "config");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Configuration.FeelingTemplate", b =>
                {
                    b.Property<Guid>("FeelingTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<string>("IconName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnOrder(3);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(1);

                    b.Property<string>("NameTrxCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<string>("ShortCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(5);

                    b.Property<string>("UnicodeIcon")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnOrder(4);

                    b.HasKey("FeelingTemplateId");

                    b.HasIndex("NameTrxCode")
                        .IsUnique();

                    b.ToTable("FeelingTemplates", "config");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Configuration.Language", b =>
                {
                    b.Property<Guid>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<int>("Direction")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(1);

                    b.Property<string>("NameTrxCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<string>("ThreeLetterCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnOrder(4);

                    b.Property<string>("TwoLetterCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnOrder(3);

                    b.HasKey("LanguageId");

                    b.HasIndex("NameTrxCode")
                        .IsUnique();

                    b.HasIndex("ThreeLetterCode")
                        .IsUnique();

                    b.HasIndex("TwoLetterCode")
                        .IsUnique();

                    b.ToTable("Languages", "config");

                    b.HasData(
                        new
                        {
                            LanguageId = new Guid("ccb2efb1-74b4-4aca-b110-a3ba153e4b92"),
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Direction = 0,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Afrikaans",
                            NameTrxCode = "language_name_af",
                            ThreeLetterCode = "afr",
                            TwoLetterCode = "af"
                        },
                        new
                        {
                            LanguageId = new Guid("e2bd6da4-2d43-49ff-ae10-c61ebcf305b6"),
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Direction = 0,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Chinese",
                            NameTrxCode = "language_name_zh",
                            ThreeLetterCode = "zho",
                            TwoLetterCode = "zh"
                        },
                        new
                        {
                            LanguageId = new Guid("4bd4c1a1-9736-4f04-b974-90bc1cd61630"),
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Direction = 0,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "English",
                            NameTrxCode = "language_name_en",
                            ThreeLetterCode = "eng",
                            TwoLetterCode = "en"
                        },
                        new
                        {
                            LanguageId = new Guid("804b9015-ca16-4fb0-8cc6-20e362fb3afb"),
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Direction = 0,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "French",
                            NameTrxCode = "language_name_fr",
                            ThreeLetterCode = "fra",
                            TwoLetterCode = "fr"
                        },
                        new
                        {
                            LanguageId = new Guid("2dde1e98-256b-4816-a58a-d9430982f525"),
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Direction = 0,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "German",
                            NameTrxCode = "language_name_de",
                            ThreeLetterCode = "deu",
                            TwoLetterCode = "de"
                        },
                        new
                        {
                            LanguageId = new Guid("c09905d9-10e4-4e61-bf83-d037533e377e"),
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Direction = 0,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Hebrew",
                            NameTrxCode = "language_name_he",
                            ThreeLetterCode = "heb",
                            TwoLetterCode = "he"
                        },
                        new
                        {
                            LanguageId = new Guid("65cff48a-6729-4d4f-a974-7bc27204b09a"),
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Direction = 0,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Hindi",
                            NameTrxCode = "language_name_hi",
                            ThreeLetterCode = "hin",
                            TwoLetterCode = "hi"
                        },
                        new
                        {
                            LanguageId = new Guid("1c9985ff-2c5f-4574-a126-fd04d583c0d2"),
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Direction = 0,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Italian",
                            NameTrxCode = "language_name_it",
                            ThreeLetterCode = "ita",
                            TwoLetterCode = "it"
                        },
                        new
                        {
                            LanguageId = new Guid("0b79c147-cc62-4071-ada8-cb2e5d06ad72"),
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Direction = 0,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Japanese",
                            NameTrxCode = "language_name_ja",
                            ThreeLetterCode = "jpn",
                            TwoLetterCode = "ja"
                        },
                        new
                        {
                            LanguageId = new Guid("b0b595b9-5133-4d31-8218-901b6426ec0f"),
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Direction = 0,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Russian",
                            NameTrxCode = "language_name_ru",
                            ThreeLetterCode = "rus",
                            TwoLetterCode = "ru"
                        },
                        new
                        {
                            LanguageId = new Guid("884a154f-eb78-4a7a-bddc-e58ae631b884"),
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Direction = 0,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Xhosa",
                            NameTrxCode = "language_name_xh",
                            ThreeLetterCode = "xho",
                            TwoLetterCode = "xh"
                        },
                        new
                        {
                            LanguageId = new Guid("54880bec-0fdd-4ad6-af13-9042d0916615"),
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Direction = 0,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Zulu",
                            NameTrxCode = "language_name_zu",
                            ThreeLetterCode = "zul",
                            TwoLetterCode = "zu"
                        });
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Configuration.PhoneNumberType", b =>
                {
                    b.Property<Guid>("PhoneNumberTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(1);

                    b.HasKey("PhoneNumberTypeId");

                    b.ToTable("PhoneNumberTypes", "config");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Configuration.ReactionTemplate", b =>
                {
                    b.Property<Guid>("ReactionTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<string>("IconName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnOrder(3);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(1);

                    b.Property<string>("NameTrxCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<string>("UnicodeIcon")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnOrder(4);

                    b.HasKey("ReactionTemplateId");

                    b.HasIndex("NameTrxCode")
                        .IsUnique();

                    b.ToTable("ReactionTemplates", "config");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Configuration.SkinTone", b =>
                {
                    b.Property<Guid>("SkinToneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(3);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionTrxCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(1);

                    b.Property<string>("NameTrxCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.HasKey("SkinToneId");

                    b.ToTable("SkinTones", "config");

                    b.HasData(
                        new
                        {
                            SkinToneId = new Guid("86146d02-a42a-4804-8d6b-1cdb90baafd7"),
                            ColorCode = "#FCEA2B",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "",
                            DescriptionTrxCode = "skintone_description_default",
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Default",
                            NameTrxCode = "skintone_name_default"
                        },
                        new
                        {
                            SkinToneId = new Guid("2469a010-313c-4c7f-991d-2fab9bf2245f"),
                            ColorCode = "#FADCDC",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "",
                            DescriptionTrxCode = "skintone_description_light",
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Light",
                            NameTrxCode = "skintone_name_light"
                        },
                        new
                        {
                            SkinToneId = new Guid("59bc3be7-4bb1-4c9d-801d-de233002e6e7"),
                            ColorCode = "#DEBB90",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "",
                            DescriptionTrxCode = "skintone_description_mediumlight",
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "MediumLight",
                            NameTrxCode = "skintone_name_mediumlight"
                        },
                        new
                        {
                            SkinToneId = new Guid("a11a3f21-e8fa-49d3-b516-ec5b95f2fa70"),
                            ColorCode = "#C19A65",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "",
                            DescriptionTrxCode = "skintone_description_medium",
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Medium",
                            NameTrxCode = "skintone_name_medium"
                        },
                        new
                        {
                            SkinToneId = new Guid("4b61cbb8-8c4a-4893-a73c-47fc8e0361e3"),
                            ColorCode = "#A57939",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "",
                            DescriptionTrxCode = "skintone_description_mediumdark",
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "MediumDark",
                            NameTrxCode = "skintone_name_mediumdark"
                        },
                        new
                        {
                            SkinToneId = new Guid("13cf913a-613e-403d-a55c-5bf30a1205af"),
                            ColorCode = "#6A462F",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "",
                            DescriptionTrxCode = "skintone_description_dark",
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Dark",
                            NameTrxCode = "skintone_name_dark"
                        });
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Configuration.SystemSetting", b =>
                {
                    b.Property<Guid>("SystemSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<int>("DataType")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("DefaultValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnOrder(7);

                    b.Property<string>("HelpText")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnOrder(5);

                    b.Property<string>("HelpTextTrxCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(6);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<int?>("MaximumValueLength")
                        .HasColumnType("int")
                        .HasColumnOrder(12);

                    b.Property<int?>("MaximumValues")
                        .HasColumnType("int")
                        .HasColumnOrder(10);

                    b.Property<int?>("MinimumValueLength")
                        .HasColumnType("int")
                        .HasColumnOrder(13);

                    b.Property<int?>("MinimumValues")
                        .HasColumnType("int")
                        .HasColumnOrder(11);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnOrder(1);

                    b.Property<string>("NameTrxCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<Guid?>("SettingCategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(15);

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnOrder(4);

                    b.Property<string>("ShortDescriptionTrxCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UserMaySet")
                        .HasColumnType("bit")
                        .HasColumnOrder(16);

                    b.Property<string>("Value")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnOrder(8);

                    b.Property<string>("ValueChoicesLookupName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(9);

                    b.HasKey("SystemSettingId");

                    b.HasIndex("NameTrxCode")
                        .IsUnique();

                    b.HasIndex("SettingCategoryId");

                    b.ToTable("Settings", "config");

                    b.HasData(
                        new
                        {
                            SystemSettingId = new Guid("f40d10d2-48a1-4771-b30e-abd65bc2b53d"),
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DataType = 21,
                            DefaultValue = "AU",
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Regional Format",
                            NameTrxCode = "system_setting_regional_format",
                            ShortDescription = "Formats for dates, times and numbers.",
                            UserMaySet = true
                        },
                        new
                        {
                            SystemSettingId = new Guid("214315b5-6109-40ca-b23b-4419b4369de7"),
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DataType = 21,
                            DefaultValue = "EN",
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Language Code",
                            NameTrxCode = "system_setting_language_code",
                            ShortDescription = "The language code of the Astrana instance user.",
                            UserMaySet = true
                        },
                        new
                        {
                            SystemSettingId = new Guid("5fcf50f5-2d8a-4085-82c0-b0a6316b129f"),
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DataType = 4,
                            DefaultValue = "AUS Eastern Standard Time",
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Time Zone",
                            NameTrxCode = "system_setting_time_zone",
                            ShortDescription = "The time zone of the Astrana instance user.",
                            UserMaySet = true
                        },
                        new
                        {
                            SystemSettingId = new Guid("64bd6c09-bd2e-47d9-92c3-a215fd30f342"),
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DataType = 4,
                            DefaultValue = "localhost",
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Host Name",
                            NameTrxCode = "system_setting_host_name",
                            ShortDescription = "The address of the Astrana instance.",
                            UserMaySet = true
                        },
                        new
                        {
                            SystemSettingId = new Guid("8cf6f718-c898-4605-8e60-ae085b569f1d"),
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DataType = 2,
                            DefaultValue = "",
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Host Port Number",
                            NameTrxCode = "system_setting_host_port_number",
                            ShortDescription = "The host port number of the Astrana instance.",
                            UserMaySet = true
                        },
                        new
                        {
                            SystemSettingId = new Guid("68c8d22a-85fd-4ace-918f-33b9949ba7bb"),
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DataType = 4,
                            DefaultValue = "",
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Idp Issuer Signing Key Secret",
                            NameTrxCode = "system_setting_idp_issuer_signing_key_secret",
                            ShortDescription = "The secret used for generating the Idp Issuer Signing Key for the Astrana instance.",
                            UserMaySet = false,
                            Value = "69473DFCE4E2D15A343495F3612FBD2C69473DFCE4E2D15A343495F3612FBD2C"
                        },
                        new
                        {
                            SystemSettingId = new Guid("0e5df38d-9b2a-4263-8dd2-624b3391e0dc"),
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DataType = 21,
                            DefaultValue = "",
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Default Skin Tone",
                            NameTrxCode = "system_setting_default_skin_tone",
                            ShortDescription = "The skin tone that represents the instance user.",
                            UserMaySet = true
                        },
                        new
                        {
                            SystemSettingId = new Guid("c269f856-f3f6-48f8-a6c7-0acac6dbe50b"),
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DataType = 1,
                            DefaultValue = "0",
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Multi-factor Authentication",
                            NameTrxCode = "system_setting_multi-factor_authentication",
                            ShortDescription = "Turn multi-factor authentication on/off.",
                            UserMaySet = true
                        });
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Configuration.SystemSettingCategory", b =>
                {
                    b.Property<Guid>("SystemSettingCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnOrder(3);

                    b.Property<string>("DescriptionTrxCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnOrder(4);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<string>("NameTrxCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnOrder(2);

                    b.HasKey("SystemSettingCategoryId");

                    b.HasIndex("DescriptionTrxCode")
                        .IsUnique()
                        .HasFilter("[DescriptionTrxCode] IS NOT NULL");

                    b.HasIndex("NameTrxCode")
                        .IsUnique();

                    b.ToTable("SettingCategories", "config");

                    b.HasData(
                        new
                        {
                            SystemSettingCategoryId = new Guid("f71b0459-44ab-499e-b5d7-afca31ab19b5"),
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Instance settings.",
                            DescriptionTrxCode = "system_setting_category_description_instance",
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Instance",
                            NameTrxCode = "system_setting_category_instance"
                        },
                        new
                        {
                            SystemSettingCategoryId = new Guid("edcbb17e-d9ee-481d-b79c-340858cff353"),
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Security settings.",
                            DescriptionTrxCode = "system_setting_category_description_security",
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Security",
                            NameTrxCode = "system_setting_category_security"
                        },
                        new
                        {
                            SystemSettingCategoryId = new Guid("e031d3cb-b5f7-4267-b373-d70996e70828"),
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Localization settings.",
                            DescriptionTrxCode = "system_setting_category_description_localization",
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Localization",
                            NameTrxCode = "system_setting_category_localization"
                        },
                        new
                        {
                            SystemSettingCategoryId = new Guid("083ea747-18db-4048-9a8f-96aa6ded38c4"),
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Personalization settings.",
                            DescriptionTrxCode = "system_setting_category_description_personalization",
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Personalization",
                            NameTrxCode = "system_setting_category_personalization"
                        },
                        new
                        {
                            SystemSettingCategoryId = new Guid("7dc564b5-9cc9-459e-987a-695fbfcab4a0"),
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Settings relating to rights and permissions for system access.",
                            DescriptionTrxCode = "setting_category_description_access_control",
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Access Control",
                            NameTrxCode = "system_setting_category_access_control"
                        });
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Configuration.TimeZone", b =>
                {
                    b.Property<string>("CorrespondingUtcZone")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnOrder(4);

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<bool>("DaylightSavingApplies")
                        .HasColumnType("bit")
                        .HasColumnOrder(6);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<string>("NameTrxCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<Guid>("TimeZoneId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.HasKey("CorrespondingUtcZone", "Abbreviation", "Name");

                    b.ToTable("TimeZones", "config");

                    b.HasData(
                        new
                        {
                            CorrespondingUtcZone = "9:30",
                            Abbreviation = "ACST",
                            Name = "Australian Central Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_australian_central_standard_time",
                            TimeZoneId = new Guid("b3cdda4c-4816-4f2c-b0f4-f86606936604")
                        },
                        new
                        {
                            CorrespondingUtcZone = "9:30",
                            Abbreviation = "ACT",
                            Name = "Australian Central Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_australian_central_time",
                            TimeZoneId = new Guid("e9fa9a48-9828-4e0d-9717-ea39888457ec")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-5",
                            Abbreviation = "ACT",
                            Name = "Acre Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_acre_time",
                            TimeZoneId = new Guid("4824fc62-b838-4493-8281-071aa5f3250d")
                        },
                        new
                        {
                            CorrespondingUtcZone = "8:45",
                            Abbreviation = "ACWST",
                            Name = "Australian Central Western Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_australian_central_western_standard_time",
                            TimeZoneId = new Guid("e283c380-64fc-4a9d-88f5-e901af22db22")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-3",
                            Abbreviation = "ADST",
                            Name = "Atlantic Daylight Saving Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_atlantic_daylight_saving_time",
                            TimeZoneId = new Guid("d2cb2bd1-3794-42e6-8ef6-b1434fc71a01")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-8",
                            Abbreviation = "ADST",
                            Name = "Alaska Daylight Saving Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_alaska_daylight_saving_time",
                            TimeZoneId = new Guid("e73df2b3-ff41-4942-aa2a-7337c360f41c")
                        },
                        new
                        {
                            CorrespondingUtcZone = "10",
                            Abbreviation = "AEST",
                            Name = "Australian Eastern Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_australian_eastern_standard_time",
                            TimeZoneId = new Guid("5b7493d6-5c86-459d-abe9-4a56eddd543f")
                        },
                        new
                        {
                            CorrespondingUtcZone = "10",
                            Abbreviation = "AET",
                            Name = "Australian Eastern Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_australian_eastern_time",
                            TimeZoneId = new Guid("fc1bebce-f99a-461e-af7e-6676b32afc64")
                        },
                        new
                        {
                            CorrespondingUtcZone = "4:30",
                            Abbreviation = "AFT",
                            Name = "Afghanistan Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_afghanistan_time",
                            TimeZoneId = new Guid("01209189-36fa-4e14-b3eb-c887754b76b8")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-9",
                            Abbreviation = "AKST",
                            Name = "Alaska Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_alaska_standard_time",
                            TimeZoneId = new Guid("d0f78a94-6f49-45b7-98e0-bbecb6fa7160")
                        },
                        new
                        {
                            CorrespondingUtcZone = "6",
                            Abbreviation = "ALMT",
                            Name = "Alma-Ata Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_alma-ata_time",
                            TimeZoneId = new Guid("a3c67c15-0902-4299-ab8c-230a860d2bea")
                        },
                        new
                        {
                            CorrespondingUtcZone = "4",
                            Abbreviation = "AMT",
                            Name = "Armenia Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_armenia_time",
                            TimeZoneId = new Guid("80a3adc6-95ae-4940-ac9f-62d65f221a08")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-4",
                            Abbreviation = "AMT",
                            Name = "Amazon Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_amazon_time",
                            TimeZoneId = new Guid("bf96ebb0-f81a-441c-9ebc-758297316f66")
                        },
                        new
                        {
                            CorrespondingUtcZone = "12",
                            Abbreviation = "ANAT",
                            Name = "Anadyr Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_anadyr_time",
                            TimeZoneId = new Guid("00499512-3437-4f1b-a53c-cd6f7d3c7ac1")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-12",
                            Abbreviation = "AoE",
                            Name = "Anywhere on Earth",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_anywhere_on_earth",
                            TimeZoneId = new Guid("67291fd8-a782-4e54-bd63-9bd09988a290")
                        },
                        new
                        {
                            CorrespondingUtcZone = "5",
                            Abbreviation = "AQTT",
                            Name = "Aqtobe Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_aqtobe_time",
                            TimeZoneId = new Guid("0359fe57-68ba-4b4b-8776-c2bb4b08bab0")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-3",
                            Abbreviation = "ART",
                            Name = "Argentina Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_argentina_time",
                            TimeZoneId = new Guid("cc402626-3bc9-46aa-ac9d-be13ddfc7c1a")
                        },
                        new
                        {
                            CorrespondingUtcZone = "3",
                            Abbreviation = "AST",
                            Name = "Arabia Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_arabia_standard_time",
                            TimeZoneId = new Guid("9a806572-b4e7-4d16-8277-9b76d749cc37")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-4",
                            Abbreviation = "AST",
                            Name = "Atlantic Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_atlantic_standard_time",
                            TimeZoneId = new Guid("99db2735-4845-4f02-a424-4582840390b2")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-9",
                            Abbreviation = "AT",
                            Name = "Alaska Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_alaska_time",
                            TimeZoneId = new Guid("96072e2c-4501-41b9-a493-6e6a0257c62a")
                        },
                        new
                        {
                            CorrespondingUtcZone = "8",
                            Abbreviation = "AWST",
                            Name = "Australian Western Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_australian_western_standard_time",
                            TimeZoneId = new Guid("429a37d7-d05f-4664-b2eb-9f7ef1b234a9")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-1",
                            Abbreviation = "AZOT",
                            Name = "Azores Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_azores_time",
                            TimeZoneId = new Guid("4ff8414a-a8f5-4414-b63b-eedc5934d304")
                        },
                        new
                        {
                            CorrespondingUtcZone = "4",
                            Abbreviation = "AZT",
                            Name = "Azerbaijan Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_azerbaijan_time",
                            TimeZoneId = new Guid("7ab58eee-dae5-4f32-bc16-0df823051303")
                        },
                        new
                        {
                            CorrespondingUtcZone = "1",
                            Abbreviation = "BDST",
                            Name = "British Daylight Saving Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_british_daylight_saving_time",
                            TimeZoneId = new Guid("e10b6410-2003-4dab-8553-6abf16adc93c")
                        },
                        new
                        {
                            CorrespondingUtcZone = "8",
                            Abbreviation = "BNT",
                            Name = "Brunei Darussalam Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_brunei_darussalam_time",
                            TimeZoneId = new Guid("6687c1a5-b5c2-4705-bdc2-db6bbb90513e")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-4",
                            Abbreviation = "BOT",
                            Name = "Bolivia Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_bolivia_time",
                            TimeZoneId = new Guid("5391feba-a260-4b22-85a9-b34244241bea")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-3",
                            Abbreviation = "BRT",
                            Name = "Brasília Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_brasília_time",
                            TimeZoneId = new Guid("296760b6-f5cb-49eb-8513-b6ad10524a85")
                        },
                        new
                        {
                            CorrespondingUtcZone = "11",
                            Abbreviation = "BST",
                            Name = "Bougainville Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_bougainville_standard_time",
                            TimeZoneId = new Guid("eb91a2cc-7f89-4de4-8882-f3aafd4916e1")
                        },
                        new
                        {
                            CorrespondingUtcZone = "6",
                            Abbreviation = "BST",
                            Name = "Bangladesh Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_bangladesh_standard_time",
                            TimeZoneId = new Guid("e727ccc5-7b8f-408f-aa3b-026fa30796ce")
                        },
                        new
                        {
                            CorrespondingUtcZone = "6",
                            Abbreviation = "BTT",
                            Name = "Bhutan Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_bhutan_time",
                            TimeZoneId = new Guid("0ddb3db3-70a8-4b74-862e-bf16aca69c3c")
                        },
                        new
                        {
                            CorrespondingUtcZone = "8",
                            Abbreviation = "CAST",
                            Name = "Casey Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_casey_time",
                            TimeZoneId = new Guid("c899cbcd-e481-4528-99ae-0b700ad1a910")
                        },
                        new
                        {
                            CorrespondingUtcZone = "2",
                            Abbreviation = "CAT",
                            Name = "Central Africa Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_central_africa_time",
                            TimeZoneId = new Guid("20b1cffe-640f-4461-b27a-8059cbb49470")
                        },
                        new
                        {
                            CorrespondingUtcZone = "6:30",
                            Abbreviation = "CCT",
                            Name = "Cocos Islands Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_cocos_islands_time",
                            TimeZoneId = new Guid("05aa85e8-39e6-4fe9-857c-1ecf3465d913")
                        },
                        new
                        {
                            CorrespondingUtcZone = "10:30",
                            Abbreviation = "CDST",
                            Name = "Central Daylight Savings Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_central_daylight_savings_time",
                            TimeZoneId = new Guid("1848b51b-cf61-4bfd-b3a4-183081cb3c0b")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-5",
                            Abbreviation = "CDST",
                            Name = "Central Daylight Saving Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_central_daylight_saving_time",
                            TimeZoneId = new Guid("e601eb38-a7a4-43bb-82c7-2667f69772f1")
                        },
                        new
                        {
                            CorrespondingUtcZone = "1",
                            Abbreviation = "CET",
                            Name = "Central European Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_central_european_time",
                            TimeZoneId = new Guid("9c4b54b1-bb12-4b8d-9392-a4a9605b5c56")
                        },
                        new
                        {
                            CorrespondingUtcZone = "12:45",
                            Abbreviation = "CHAST",
                            Name = "Chatham Island Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_chatham_island_standard_time",
                            TimeZoneId = new Guid("5970f57e-96dd-467c-a206-397073eb758d")
                        },
                        new
                        {
                            CorrespondingUtcZone = "9",
                            Abbreviation = "CHODST",
                            Name = "Choibalsan Daylight Saving Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_choibalsan_daylight_saving_time",
                            TimeZoneId = new Guid("9e0140cb-0ebe-46f1-af26-18ced4d07725")
                        },
                        new
                        {
                            CorrespondingUtcZone = "8",
                            Abbreviation = "CHOT",
                            Name = "Choibalsan Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_choibalsan_time",
                            TimeZoneId = new Guid("87688954-43c2-448d-8e3e-2211c251ef61")
                        },
                        new
                        {
                            CorrespondingUtcZone = "10",
                            Abbreviation = "ChST",
                            Name = "Chamorro Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_chamorro_standard_time",
                            TimeZoneId = new Guid("6444400f-2b9b-4e96-be57-6701bee9452c")
                        },
                        new
                        {
                            CorrespondingUtcZone = "10",
                            Abbreviation = "CHUT",
                            Name = "Chuuk Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_chuuk_time",
                            TimeZoneId = new Guid("14ee677a-86ed-4953-8ec6-c6a7fa3fa04c")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-4",
                            Abbreviation = "CIDST",
                            Name = "Cayman Islands Daylight Saving Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_cayman_islands_daylight_saving_time",
                            TimeZoneId = new Guid("cd7304d0-b278-4d72-b181-ec7145845644")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-5",
                            Abbreviation = "CIST",
                            Name = "Cayman Islands Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_cayman_islands_standard_time",
                            TimeZoneId = new Guid("c3855cdd-efe0-4fa2-af42-0fd9789d86ad")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-5",
                            Abbreviation = "CIT",
                            Name = "Cayman Islands Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_cayman_islands_time",
                            TimeZoneId = new Guid("33346f06-808e-4361-b6ab-e6d693616c24")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-10",
                            Abbreviation = "CKT",
                            Name = "Cook Island Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_cook_island_time",
                            TimeZoneId = new Guid("c698cc39-5a22-4018-b69a-aaee9536439d")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-4",
                            Abbreviation = "CLST",
                            Name = "Chile Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_chile_standard_time",
                            TimeZoneId = new Guid("95e487fe-2164-4a9d-8690-d67316f1934c")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-5",
                            Abbreviation = "COT",
                            Name = "Colombia Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_colombia_time",
                            TimeZoneId = new Guid("1e2abfe9-6eb5-46a2-8697-6cf100b6503e")
                        },
                        new
                        {
                            CorrespondingUtcZone = "8",
                            Abbreviation = "CST",
                            Name = "China Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_china_standard_time",
                            TimeZoneId = new Guid("5637db4f-a009-4504-b1a4-32760fc40249")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-5",
                            Abbreviation = "CST",
                            Name = "Cuba Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_cuba_standard_time",
                            TimeZoneId = new Guid("bb72ca01-7792-45dc-8667-e7a6a9f597c0")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-6",
                            Abbreviation = "CST",
                            Name = "Central Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_central_standard_time",
                            TimeZoneId = new Guid("3ebab140-7825-46b2-b835-7745718e7e91")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-4",
                            Abbreviation = "CT",
                            Name = "Chile Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_chile_time",
                            TimeZoneId = new Guid("109833e9-273a-4722-af21-c205a128fa7d")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-1",
                            Abbreviation = "CVT",
                            Name = "Cape Verde Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_cape_verde_time",
                            TimeZoneId = new Guid("260699bc-fe91-44e8-b3d1-ae7820974d7f")
                        },
                        new
                        {
                            CorrespondingUtcZone = "7",
                            Abbreviation = "CXT",
                            Name = "Christmas Island Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_christmas_island_time",
                            TimeZoneId = new Guid("e4078641-ef5c-4e22-956d-739f8b21c8fb")
                        },
                        new
                        {
                            CorrespondingUtcZone = "7",
                            Abbreviation = "DAVT",
                            Name = "Davis Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_davis_time",
                            TimeZoneId = new Guid("9e888ef0-963b-40bc-8f92-0bbbfe546bba")
                        },
                        new
                        {
                            CorrespondingUtcZone = "10",
                            Abbreviation = "DDUT",
                            Name = "Dumont-d'Urville Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_dumont-d'urville_time",
                            TimeZoneId = new Guid("ed146a84-6fde-41f8-9518-4b20ac6b2db9")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-6",
                            Abbreviation = "EAST",
                            Name = "Easter Island Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_easter_island_standard_time",
                            TimeZoneId = new Guid("b82062f6-64cb-465d-a4cd-cb381acfefb4")
                        },
                        new
                        {
                            CorrespondingUtcZone = "3",
                            Abbreviation = "EAT",
                            Name = "Eastern Africa Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_eastern_africa_time",
                            TimeZoneId = new Guid("c04980a0-3d02-42d4-9ba1-cb23a88bc1cf")
                        },
                        new
                        {
                            CorrespondingUtcZone = "1",
                            Abbreviation = "ECT",
                            Name = "European Central Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_european_central_time",
                            TimeZoneId = new Guid("71bf7c3c-d9a7-498a-85df-01188840448f")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-5",
                            Abbreviation = "ECT",
                            Name = "Ecuador Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_ecuador_time",
                            TimeZoneId = new Guid("2ef808fe-bf91-47a9-b0a1-d7bb21942013")
                        },
                        new
                        {
                            CorrespondingUtcZone = "11",
                            Abbreviation = "EDST",
                            Name = "Eastern Daylight Saving Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_eastern_daylight_saving_time",
                            TimeZoneId = new Guid("454a3bea-a3f4-43bd-9249-3121dd095608")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-4",
                            Abbreviation = "EDST",
                            Name = "Eastern Daylight Savings Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_eastern_daylight_savings_time",
                            TimeZoneId = new Guid("aa078093-e096-4903-898f-2eec2f836b54")
                        },
                        new
                        {
                            CorrespondingUtcZone = "2",
                            Abbreviation = "EET",
                            Name = "Eastern European Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_eastern_european_time",
                            TimeZoneId = new Guid("69709005-059a-4170-875f-43f4e44b7a2b")
                        },
                        new
                        {
                            CorrespondingUtcZone = "11",
                            Abbreviation = "EFATE",
                            Name = "Efate Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_efate_time",
                            TimeZoneId = new Guid("5fcd18b2-5198-4f60-a617-5380f3ee265b")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-1",
                            Abbreviation = "EGT",
                            Name = "Eastern Greenland Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_eastern_greenland_time",
                            TimeZoneId = new Guid("70e2e257-65bf-477f-b072-4a10a48164af")
                        },
                        new
                        {
                            CorrespondingUtcZone = "10",
                            Abbreviation = "EST",
                            Name = "Eastern Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_eastern_standard_time",
                            TimeZoneId = new Guid("bd6c6e9e-d361-466d-9043-9db59a71bddb")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-5",
                            Abbreviation = "EST",
                            Name = "Eastern Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_eastern_standard_time",
                            TimeZoneId = new Guid("81b11e80-c327-4215-b5b6-06c1bed9d154")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-5",
                            Abbreviation = "ET",
                            Name = "Eastern Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_eastern_time",
                            TimeZoneId = new Guid("67167fbf-34b8-439a-b54b-3318136ad2cd")
                        },
                        new
                        {
                            CorrespondingUtcZone = "3",
                            Abbreviation = "FET",
                            Name = "Further-Eastern European Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_further-eastern_european_time",
                            TimeZoneId = new Guid("5dc2d120-a5c1-44b3-8abf-4d23f1031c37")
                        },
                        new
                        {
                            CorrespondingUtcZone = "12",
                            Abbreviation = "FJT",
                            Name = "Fiji Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_fiji_time",
                            TimeZoneId = new Guid("2a8b2676-3725-4b76-b580-74139ac73acb")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-4",
                            Abbreviation = "FKST",
                            Name = "Falkland Island Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_falkland_island_standard_time",
                            TimeZoneId = new Guid("67407251-f96f-4288-9c5c-66fc30f48cd5")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-2",
                            Abbreviation = "FNT",
                            Name = "Fernando de Noronha Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_fernando_de_noronha_time",
                            TimeZoneId = new Guid("91685b30-7211-43f5-a80e-92c17b93bda7")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-6",
                            Abbreviation = "GALT",
                            Name = "Galapagos Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_galapagos_time",
                            TimeZoneId = new Guid("82c6b672-53d9-48dd-869c-2e3cd6703073")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-9",
                            Abbreviation = "GAMT",
                            Name = "Gambier Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_gambier_time",
                            TimeZoneId = new Guid("ffc18fd2-1cdf-4994-883e-b69b2e6f792b")
                        },
                        new
                        {
                            CorrespondingUtcZone = "4",
                            Abbreviation = "GET",
                            Name = "Georgia Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_georgia_standard_time",
                            TimeZoneId = new Guid("3311d497-cf3c-42f8-ace1-9f1bdba08572")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-3",
                            Abbreviation = "GFT",
                            Name = "French Guiana Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_french_guiana_time",
                            TimeZoneId = new Guid("b0e0c943-be63-4e9d-876d-1ffcc47bc304")
                        },
                        new
                        {
                            CorrespondingUtcZone = "12",
                            Abbreviation = "GILT",
                            Name = "Gilbert Island Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_gilbert_island_time",
                            TimeZoneId = new Guid("77d2a0f0-aef4-4ac9-be32-fe00bdab3f54")
                        },
                        new
                        {
                            CorrespondingUtcZone = "0",
                            Abbreviation = "GMT",
                            Name = "Greenwich Mean Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_greenwich_mean_time",
                            TimeZoneId = new Guid("873a0504-9711-4182-aaf3-321a04ad9805")
                        },
                        new
                        {
                            CorrespondingUtcZone = "10",
                            Abbreviation = "GST",
                            Name = "Guam Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_guam_standard_time",
                            TimeZoneId = new Guid("2fcec5b9-0a3c-4bec-be6c-ca17cdc18884")
                        },
                        new
                        {
                            CorrespondingUtcZone = "4",
                            Abbreviation = "GST",
                            Name = "Gulf Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_gulf_standard_time",
                            TimeZoneId = new Guid("3857dec2-25cb-4e94-9f4f-5a233973814f")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-2",
                            Abbreviation = "GST",
                            Name = "South Georgia Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_south_georgia_time",
                            TimeZoneId = new Guid("979249a7-2eb7-4985-88b7-c3f6f69936b2")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-4",
                            Abbreviation = "GYT",
                            Name = "Guyana Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_guyana_time",
                            TimeZoneId = new Guid("7ebbcdb8-5c4f-40c6-943a-4dce73ce2111")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-10",
                            Abbreviation = "HAST",
                            Name = "Hawaii-Aleutian Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_hawaii-aleutian_standard_time",
                            TimeZoneId = new Guid("bb3fa043-aa06-4778-a488-f07914ebf576")
                        },
                        new
                        {
                            CorrespondingUtcZone = "8",
                            Abbreviation = "HKT",
                            Name = "Hong Kong Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_hong_kong_time",
                            TimeZoneId = new Guid("0754f653-7dd2-4d86-917b-1a0f7043bf5b")
                        },
                        new
                        {
                            CorrespondingUtcZone = "8",
                            Abbreviation = "HOVDST",
                            Name = "Hovd Daylight Saving Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_hovd_daylight_saving_time",
                            TimeZoneId = new Guid("50ee28ce-18b6-4641-9fe0-fc342054f2ec")
                        },
                        new
                        {
                            CorrespondingUtcZone = "7",
                            Abbreviation = "HOVT",
                            Name = "Hovd Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_hovd_time",
                            TimeZoneId = new Guid("962ef749-f27d-4810-860f-12502f414f0e")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-10",
                            Abbreviation = "HST",
                            Name = "Hawaii Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_hawaii_standard_time",
                            TimeZoneId = new Guid("0113cd67-280c-42a0-81fd-8f6969e3ab5e")
                        },
                        new
                        {
                            CorrespondingUtcZone = "7",
                            Abbreviation = "ICT",
                            Name = "Indochina Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_indochina_time",
                            TimeZoneId = new Guid("680ebeac-d333-41a4-bad3-42438fa7028a")
                        },
                        new
                        {
                            CorrespondingUtcZone = "6",
                            Abbreviation = "IOT",
                            Name = "Indian Chagos Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_indian_chagos_time",
                            TimeZoneId = new Guid("e92362a9-ab12-4c2e-9a87-ab49a24c08ac")
                        },
                        new
                        {
                            CorrespondingUtcZone = "8",
                            Abbreviation = "IRKT",
                            Name = "Irkutsk Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_irkutsk_time",
                            TimeZoneId = new Guid("13609e04-58fb-461f-bac8-e85d5371694b")
                        },
                        new
                        {
                            CorrespondingUtcZone = "3:30",
                            Abbreviation = "IRST",
                            Name = "Iran Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_iran_standard_time",
                            TimeZoneId = new Guid("cbf97546-253e-4a28-800b-87a790ecf664")
                        },
                        new
                        {
                            CorrespondingUtcZone = "2",
                            Abbreviation = "IST",
                            Name = "Israel Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_israel_standard_time",
                            TimeZoneId = new Guid("766b0079-4253-479a-9852-4d293dcf1afc")
                        },
                        new
                        {
                            CorrespondingUtcZone = "1",
                            Abbreviation = "IST",
                            Name = "Irish Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_irish_standard_time",
                            TimeZoneId = new Guid("e8623192-68a8-47b8-b98a-0f773f4b7c3d")
                        },
                        new
                        {
                            CorrespondingUtcZone = "5:30",
                            Abbreviation = "IST",
                            Name = "India Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_india_standard_time",
                            TimeZoneId = new Guid("86d21087-0bf8-4ff2-a064-279d8f6a6bbd")
                        },
                        new
                        {
                            CorrespondingUtcZone = "5:30",
                            Abbreviation = "IT",
                            Name = "India Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_india_time",
                            TimeZoneId = new Guid("73d7a46b-96a3-42bf-87ae-aa58cc7b1e5d")
                        },
                        new
                        {
                            CorrespondingUtcZone = "9",
                            Abbreviation = "JST",
                            Name = "Japan Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_japan_standard_time",
                            TimeZoneId = new Guid("118b3cb8-eabd-40dc-8e5f-1c8e9c433be9")
                        },
                        new
                        {
                            CorrespondingUtcZone = "6",
                            Abbreviation = "KGT",
                            Name = "Kyrgyzstan Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_kyrgyzstan_time",
                            TimeZoneId = new Guid("ebd45284-2c51-4656-90bf-62b71dc73c39")
                        },
                        new
                        {
                            CorrespondingUtcZone = "5",
                            Abbreviation = "KIT",
                            Name = "Kerguelen (Islands) Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_kerguelen_(islands)_time",
                            TimeZoneId = new Guid("db8aad36-d70c-4afb-b1f6-c6bf7acd218b")
                        },
                        new
                        {
                            CorrespondingUtcZone = "11",
                            Abbreviation = "KOST",
                            Name = "Kosrae Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_kosrae_time",
                            TimeZoneId = new Guid("4c875850-81c6-4a3b-b1d1-99d8631653cd")
                        },
                        new
                        {
                            CorrespondingUtcZone = "7",
                            Abbreviation = "KRAT",
                            Name = "Krasnoyarsk Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_krasnoyarsk_time",
                            TimeZoneId = new Guid("850416d4-dee9-4b35-a440-d42d3b1fe6f3")
                        },
                        new
                        {
                            CorrespondingUtcZone = "9",
                            Abbreviation = "KST",
                            Name = "Korea Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_korea_standard_time",
                            TimeZoneId = new Guid("0742f884-a79c-491a-bf37-878873a6d43a")
                        },
                        new
                        {
                            CorrespondingUtcZone = "4",
                            Abbreviation = "KUYT",
                            Name = "Kuybyshev Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_kuybyshev_time",
                            TimeZoneId = new Guid("1c41e07f-7864-42b4-a5a4-4871900a6544")
                        },
                        new
                        {
                            CorrespondingUtcZone = "10:30",
                            Abbreviation = "LHST",
                            Name = "Lord Howe Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_lord_howe_standard_time",
                            TimeZoneId = new Guid("fd85e5a7-bfed-48c3-ac80-267a491efd55")
                        },
                        new
                        {
                            CorrespondingUtcZone = "14",
                            Abbreviation = "LINT",
                            Name = "Line Islands Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_line_islands_time",
                            TimeZoneId = new Guid("4dc32b79-e034-4dc0-ae0c-5acca37ffffe")
                        },
                        new
                        {
                            CorrespondingUtcZone = "11",
                            Abbreviation = "MAGT",
                            Name = "Magadan Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_magadan_time",
                            TimeZoneId = new Guid("9aebcae9-0b01-432f-9d04-c8ca592f8bec")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-9:30",
                            Abbreviation = "MART",
                            Name = "Marquesas Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_marquesas_time",
                            TimeZoneId = new Guid("d897d9aa-b87d-45ba-b3ec-f8c0de44d048")
                        },
                        new
                        {
                            CorrespondingUtcZone = "5",
                            Abbreviation = "MAWT",
                            Name = "Mawson Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_mawson_time",
                            TimeZoneId = new Guid("0f9ce16c-a25f-44f6-bdae-2e524a40741a")
                        },
                        new
                        {
                            CorrespondingUtcZone = "3",
                            Abbreviation = "MCK",
                            Name = "Moscow Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_moscow_time",
                            TimeZoneId = new Guid("0c6ca9b3-71dd-4bf0-9874-595e6042b6dd")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-6",
                            Abbreviation = "MDST",
                            Name = "Mountain Daylight Saving Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_mountain_daylight_saving_time",
                            TimeZoneId = new Guid("85532bb2-2e45-4cfa-85de-cb1ef2264b14")
                        },
                        new
                        {
                            CorrespondingUtcZone = "12",
                            Abbreviation = "MHT",
                            Name = "Marshall Islands Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_marshall_islands_time",
                            TimeZoneId = new Guid("96e8887f-65a3-4bb9-a0ba-cc6e1455f944")
                        },
                        new
                        {
                            CorrespondingUtcZone = "6:30",
                            Abbreviation = "MMT",
                            Name = "Myanmar Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_myanmar_time",
                            TimeZoneId = new Guid("40d700e4-cac4-4c80-8903-02f2047c979f")
                        },
                        new
                        {
                            CorrespondingUtcZone = "3",
                            Abbreviation = "MSK",
                            Name = "Moscow Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_moscow_standard_time",
                            TimeZoneId = new Guid("6063bc96-d773-46d3-92c9-11252749d8e1")
                        },
                        new
                        {
                            CorrespondingUtcZone = "8",
                            Abbreviation = "MST",
                            Name = "Malaysian Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_malaysian_standard_time",
                            TimeZoneId = new Guid("efdfedc9-1acb-4b8e-9435-2cd4c778a9ab")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-7",
                            Abbreviation = "MST",
                            Name = "Mountain Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_mountain_standard_time",
                            TimeZoneId = new Guid("d1b16860-5de1-4fc8-8362-fc4416aca8ae")
                        },
                        new
                        {
                            CorrespondingUtcZone = "4",
                            Abbreviation = "MUT",
                            Name = "Mauritius Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_mauritius_time",
                            TimeZoneId = new Guid("f842692d-b0ec-4aae-83a4-5b992d993a58")
                        },
                        new
                        {
                            CorrespondingUtcZone = "5",
                            Abbreviation = "MVT",
                            Name = "Maldives Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_maldives_time",
                            TimeZoneId = new Guid("c4906f59-ef56-45a0-8b4e-4c3d98139ef6")
                        },
                        new
                        {
                            CorrespondingUtcZone = "8",
                            Abbreviation = "MYT",
                            Name = "Malaysia Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_malaysia_time",
                            TimeZoneId = new Guid("ca2d5e09-f2f0-4230-8cc9-90be4844f694")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-6",
                            Abbreviation = "NACST",
                            Name = "North American Central Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_north_american_central_standard_time",
                            TimeZoneId = new Guid("2001cda9-cf4c-46bd-afec-471e6988bc8c")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-5",
                            Abbreviation = "NAEST",
                            Name = "North American Eastern Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_north_american_eastern_standard_time",
                            TimeZoneId = new Guid("35a8c94e-19ac-4e16-aa8b-9b552187436b")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-7",
                            Abbreviation = "NAMST",
                            Name = "North American Mountain Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_north_american_mountain_standard_time",
                            TimeZoneId = new Guid("452598bb-ede1-40dd-9abd-6c6385d576e0")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-8",
                            Abbreviation = "NAPST",
                            Name = "North American Pacific Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_north_american_pacific_standard_time",
                            TimeZoneId = new Guid("5d10fb2c-6703-437b-87b0-914627c8dc32")
                        },
                        new
                        {
                            CorrespondingUtcZone = "11",
                            Abbreviation = "NCT",
                            Name = "New Caledonia Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_new_caledonia_time",
                            TimeZoneId = new Guid("2716818e-6769-4301-a099-9f89f03d8e29")
                        },
                        new
                        {
                            CorrespondingUtcZone = "11",
                            Abbreviation = "NFT",
                            Name = "Norfolk Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_norfolk_time",
                            TimeZoneId = new Guid("0e843141-48b1-4e61-8745-b0e4c2f7b012")
                        },
                        new
                        {
                            CorrespondingUtcZone = "7",
                            Abbreviation = "NOVT",
                            Name = "Novosibirsk Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_novosibirsk_time",
                            TimeZoneId = new Guid("74dabf98-55d8-49c7-960e-acb19d59cf6c")
                        },
                        new
                        {
                            CorrespondingUtcZone = "5:45",
                            Abbreviation = "NPT",
                            Name = "Nepal Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_nepal_time",
                            TimeZoneId = new Guid("215c1492-5b3b-48ff-a1b9-b25b373faa96")
                        },
                        new
                        {
                            CorrespondingUtcZone = "12",
                            Abbreviation = "NRT",
                            Name = "Nauru Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_nauru_time",
                            TimeZoneId = new Guid("7ef7d0ca-d161-4ec2-ba2f-5a49713b527c")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-3:30",
                            Abbreviation = "NST",
                            Name = "Newfoundland Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_newfoundland_standard_time",
                            TimeZoneId = new Guid("c6734cef-03de-4742-8896-5c436f6ea29a")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-11",
                            Abbreviation = "NUT",
                            Name = "Niue Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_niue_time",
                            TimeZoneId = new Guid("334f2dfb-1186-4cd3-be60-16bde76f4610")
                        },
                        new
                        {
                            CorrespondingUtcZone = "12",
                            Abbreviation = "NZST",
                            Name = "New Zealand Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_new_zealand_standard_time",
                            TimeZoneId = new Guid("5cbb59f0-178b-4fb5-981b-e37bab9c1e9c")
                        },
                        new
                        {
                            CorrespondingUtcZone = "6",
                            Abbreviation = "OMST",
                            Name = "Omsk Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_omsk_standard_time",
                            TimeZoneId = new Guid("ee822069-e036-4e7a-82de-f49870357a0f")
                        },
                        new
                        {
                            CorrespondingUtcZone = "5",
                            Abbreviation = "ORAT",
                            Name = "Oral Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_oral_time",
                            TimeZoneId = new Guid("274750c4-c63f-4eb0-8114-6032606dc647")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-7",
                            Abbreviation = "PDST",
                            Name = "Pacific Daylight Saving Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_pacific_daylight_saving_time",
                            TimeZoneId = new Guid("dc81e266-502a-4994-b58a-40c79500a463")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-5",
                            Abbreviation = "PET",
                            Name = "Peru Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_peru_time",
                            TimeZoneId = new Guid("0f10d3be-b945-4062-a2de-2e08a96e2e4c")
                        },
                        new
                        {
                            CorrespondingUtcZone = "12",
                            Abbreviation = "PETT",
                            Name = "Kamchatka Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_kamchatka_time",
                            TimeZoneId = new Guid("541768f0-7a1b-4323-aa99-f897c32f2320")
                        },
                        new
                        {
                            CorrespondingUtcZone = "10",
                            Abbreviation = "PGT",
                            Name = "Papua New Guinea Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_papua_new_guinea_time",
                            TimeZoneId = new Guid("9ff5c176-697d-428d-bc84-66fb597308cc")
                        },
                        new
                        {
                            CorrespondingUtcZone = "13",
                            Abbreviation = "PHOT",
                            Name = "Phoenix Island Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_phoenix_island_time",
                            TimeZoneId = new Guid("db57b342-401b-425d-a958-b448fcf7b1f8")
                        },
                        new
                        {
                            CorrespondingUtcZone = "8",
                            Abbreviation = "PHT",
                            Name = "Philippine Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_philippine_time",
                            TimeZoneId = new Guid("56543442-45c0-409b-a991-e2d1a1cd628d")
                        },
                        new
                        {
                            CorrespondingUtcZone = "5",
                            Abbreviation = "PKT",
                            Name = "Pakistan Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_pakistan_standard_time",
                            TimeZoneId = new Guid("a241c4f6-b116-4b2b-824b-5770078628d1")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-3",
                            Abbreviation = "PMST",
                            Name = "Pierre & Miquelon Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_pierre_&_miquelon_standard_time",
                            TimeZoneId = new Guid("aad28d22-d76d-409e-b9b2-5ce1c113ee86")
                        },
                        new
                        {
                            CorrespondingUtcZone = "11",
                            Abbreviation = "PONT",
                            Name = "Pohnpei Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_pohnpei_standard_time",
                            TimeZoneId = new Guid("157491e4-d8cc-4138-9aef-84a90b05c0ab")
                        },
                        new
                        {
                            CorrespondingUtcZone = "8",
                            Abbreviation = "PST",
                            Name = "Philippine Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_philippine_standard_time",
                            TimeZoneId = new Guid("c05c10c5-3f4d-4748-ac11-8d83d30a6cba")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-8",
                            Abbreviation = "PST",
                            Name = "Pacific Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_pacific_standard_time",
                            TimeZoneId = new Guid("c7e3ed5b-f8a7-41ac-94ae-fdcb7f8f6bb6")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-8",
                            Abbreviation = "PST",
                            Name = "Pitcairn Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_pitcairn_standard_time",
                            TimeZoneId = new Guid("ce92fb1e-6f9d-47ec-ba2e-a47c4f93ff01")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-8",
                            Abbreviation = "PT",
                            Name = "Pacific Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_pacific_time",
                            TimeZoneId = new Guid("cf623469-da5e-40ff-b071-2c16876989b0")
                        },
                        new
                        {
                            CorrespondingUtcZone = "9",
                            Abbreviation = "PWT",
                            Name = "Palau Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_palau_time",
                            TimeZoneId = new Guid("a46234bb-37a2-4b5a-a191-72fe94c29101")
                        },
                        new
                        {
                            CorrespondingUtcZone = "8:30",
                            Abbreviation = "PYST",
                            Name = "Pyongyang Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_pyongyang_standard_time",
                            TimeZoneId = new Guid("84d204d6-bdaa-4158-94ee-ff3accf98814")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-4",
                            Abbreviation = "PYT",
                            Name = "Paraguay Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_paraguay_time",
                            TimeZoneId = new Guid("7a08b14b-ecd9-4a2a-a387-06d8571baf5a")
                        },
                        new
                        {
                            CorrespondingUtcZone = "6",
                            Abbreviation = "QYZT",
                            Name = "Qyzylorda Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_qyzylorda_time",
                            TimeZoneId = new Guid("1bcd2e3a-725d-40b2-8687-3c37177f6419")
                        },
                        new
                        {
                            CorrespondingUtcZone = "4",
                            Abbreviation = "RET",
                            Name = "Reunion Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_reunion_time",
                            TimeZoneId = new Guid("25a11511-d966-4e1c-bf1e-d177d347abd7")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-3",
                            Abbreviation = "ROTT",
                            Name = "Rothera Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_rothera_time",
                            TimeZoneId = new Guid("b579f716-497b-4147-bb0a-4a0167b99d08")
                        },
                        new
                        {
                            CorrespondingUtcZone = "11",
                            Abbreviation = "SAKT",
                            Name = "Sakhalin Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_sakhalin_time",
                            TimeZoneId = new Guid("3fe9b36a-1568-4322-b5af-692f0ab54dac")
                        },
                        new
                        {
                            CorrespondingUtcZone = "4",
                            Abbreviation = "SAMT",
                            Name = "Samara Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_samara_standard_time",
                            TimeZoneId = new Guid("835f13e1-fe55-42b5-917e-b7ad27bf4eaf")
                        },
                        new
                        {
                            CorrespondingUtcZone = "2",
                            Abbreviation = "SAST",
                            Name = "South African Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_south_african_standard_time",
                            TimeZoneId = new Guid("882bb8e6-06b0-413e-a666-671ea2156286")
                        },
                        new
                        {
                            CorrespondingUtcZone = "11",
                            Abbreviation = "SBT",
                            Name = "Solomon Islands Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_solomon_islands_time",
                            TimeZoneId = new Guid("674fc518-d598-48e4-9028-fe0de7bb078f")
                        },
                        new
                        {
                            CorrespondingUtcZone = "4",
                            Abbreviation = "SCT",
                            Name = "Seychelles Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_seychelles_time",
                            TimeZoneId = new Guid("b697e7bd-0e0f-46b2-8142-db4417be8a90")
                        },
                        new
                        {
                            CorrespondingUtcZone = "8",
                            Abbreviation = "SGT",
                            Name = "Singapore Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_singapore_time",
                            TimeZoneId = new Guid("65ec1177-4fc2-4e99-b7c8-617097919b76")
                        },
                        new
                        {
                            CorrespondingUtcZone = "11",
                            Abbreviation = "SRET",
                            Name = "Srednekolymsk Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_srednekolymsk_time",
                            TimeZoneId = new Guid("67d76082-520a-4a69-9a22-8ed08e126bd0")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-3",
                            Abbreviation = "SRT",
                            Name = "Suriname Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_suriname_time",
                            TimeZoneId = new Guid("fc0cc2da-0fbc-4bd5-87e1-2e69d822ba18")
                        },
                        new
                        {
                            CorrespondingUtcZone = "8",
                            Abbreviation = "SST",
                            Name = "Singapore Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_singapore_standard_time",
                            TimeZoneId = new Guid("781f807e-d9fa-490e-a0d1-1c55a8073815")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-11",
                            Abbreviation = "SST",
                            Name = "Samoa Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_samoa_standard_time",
                            TimeZoneId = new Guid("01c82835-13d0-4a15-8722-e7eeaf56df04")
                        },
                        new
                        {
                            CorrespondingUtcZone = "13",
                            Abbreviation = "ST",
                            Name = "Samoa Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_samoa_time",
                            TimeZoneId = new Guid("076a66c6-f410-479d-9af2-172a1cc07d5f")
                        },
                        new
                        {
                            CorrespondingUtcZone = "3",
                            Abbreviation = "SYOT",
                            Name = "Syowa Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_syowa_time",
                            TimeZoneId = new Guid("d0a30222-db35-41c6-acf8-013a0cfcb16e")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-10",
                            Abbreviation = "TAHT",
                            Name = "Tahiti Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_tahiti_time",
                            TimeZoneId = new Guid("35fe7e1d-1097-43f5-9233-cd4f556545b0")
                        },
                        new
                        {
                            CorrespondingUtcZone = "5",
                            Abbreviation = "TFT",
                            Name = "French Southern and Antarctic Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_french_southern_and_antarctic_time",
                            TimeZoneId = new Guid("04bc44af-7ee7-4247-a61d-909aab4559cc")
                        },
                        new
                        {
                            CorrespondingUtcZone = "5",
                            Abbreviation = "TJT",
                            Name = "Tajikistan Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_tajikistan_time",
                            TimeZoneId = new Guid("38de27b2-ef80-4361-91c7-bc2f3d6f1009")
                        },
                        new
                        {
                            CorrespondingUtcZone = "13",
                            Abbreviation = "TKT",
                            Name = "Tokelau Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_tokelau_time",
                            TimeZoneId = new Guid("096bdc22-a505-4d1c-a8d2-f6c4bf5b69c7")
                        },
                        new
                        {
                            CorrespondingUtcZone = "9",
                            Abbreviation = "TLT",
                            Name = "East Timor Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_east_timor_time",
                            TimeZoneId = new Guid("db6bdd90-e20f-432f-9219-1686b24d2d7f")
                        },
                        new
                        {
                            CorrespondingUtcZone = "5",
                            Abbreviation = "TMT",
                            Name = "Turkmenistan Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_turkmenistan_time",
                            TimeZoneId = new Guid("73741f9d-8458-4c05-beb2-de59e82f262a")
                        },
                        new
                        {
                            CorrespondingUtcZone = "13",
                            Abbreviation = "TOT",
                            Name = "Tonga Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_tonga_time",
                            TimeZoneId = new Guid("989a7dcb-12cc-4472-933f-e77e26a60e67")
                        },
                        new
                        {
                            CorrespondingUtcZone = "3",
                            Abbreviation = "TRT",
                            Name = "Turkey Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_turkey_time",
                            TimeZoneId = new Guid("97e467df-b732-4722-9a4f-89732d41325a")
                        },
                        new
                        {
                            CorrespondingUtcZone = "12",
                            Abbreviation = "TVT",
                            Name = "Tuvalu Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_tuvalu_time",
                            TimeZoneId = new Guid("31af7caa-50a0-48b2-ba70-26615b345419")
                        },
                        new
                        {
                            CorrespondingUtcZone = "8",
                            Abbreviation = "ULAT",
                            Name = "Ulaanbaatar Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_ulaanbaatar_time",
                            TimeZoneId = new Guid("2f2dc3f6-48b4-4d67-a16b-06beaceba2cd")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-3",
                            Abbreviation = "UYT",
                            Name = "Uruguay Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_uruguay_time",
                            TimeZoneId = new Guid("2a95085b-99e2-463c-97a6-32a54b81b867")
                        },
                        new
                        {
                            CorrespondingUtcZone = "5",
                            Abbreviation = "UZT",
                            Name = "Uzbekistan Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_uzbekistan_time",
                            TimeZoneId = new Guid("a3666059-c3a5-492d-a2e8-ce6a190fa79f")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-4",
                            Abbreviation = "VET",
                            Name = "Venezuelan Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_venezuelan_standard_time",
                            TimeZoneId = new Guid("1c49bb5f-378d-4815-840e-6d89d68381a5")
                        },
                        new
                        {
                            CorrespondingUtcZone = "10",
                            Abbreviation = "VLAT",
                            Name = "Vladivostok Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_vladivostok_time",
                            TimeZoneId = new Guid("c250bb29-58de-4314-85f8-9a567c6398e7")
                        },
                        new
                        {
                            CorrespondingUtcZone = "6",
                            Abbreviation = "VOST",
                            Name = "Vostok Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_vostok_time",
                            TimeZoneId = new Guid("fd5d9147-78c3-48ce-b05a-825a71775fee")
                        },
                        new
                        {
                            CorrespondingUtcZone = "11",
                            Abbreviation = "VUT",
                            Name = "Vanuatu Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_vanuatu_time",
                            TimeZoneId = new Guid("f7312000-5524-4dd4-9b59-caeaed168f7c")
                        },
                        new
                        {
                            CorrespondingUtcZone = "12",
                            Abbreviation = "WAKT",
                            Name = "Wake Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_wake_time",
                            TimeZoneId = new Guid("86d2185e-6fbd-48b3-9c97-81eab528eea3")
                        },
                        new
                        {
                            CorrespondingUtcZone = "8",
                            Abbreviation = "WAT",
                            Name = "Western Australia Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_western_australia_time",
                            TimeZoneId = new Guid("2fec63b0-0d2b-4e0e-9926-f25cb5f08547")
                        },
                        new
                        {
                            CorrespondingUtcZone = "1",
                            Abbreviation = "WAT",
                            Name = "West Africa Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_west_africa_time",
                            TimeZoneId = new Guid("79370e67-54c4-4465-8adf-1ea5a20d0a75")
                        },
                        new
                        {
                            CorrespondingUtcZone = "0",
                            Abbreviation = "WET",
                            Name = "Western European Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_western_european_time",
                            TimeZoneId = new Guid("db077106-e786-4e5c-9a36-3528e4da2d08")
                        },
                        new
                        {
                            CorrespondingUtcZone = "12",
                            Abbreviation = "WFT",
                            Name = "Wallis and Futuna Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_wallis_and_futuna_time",
                            TimeZoneId = new Guid("ff13dd84-e10a-4643-a9d2-1ea85559334e")
                        },
                        new
                        {
                            CorrespondingUtcZone = "-3",
                            Abbreviation = "WGT",
                            Name = "Western Greenland Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_western_greenland_time",
                            TimeZoneId = new Guid("54b6d6de-0105-4771-9c25-bdb0a5ebf39c")
                        },
                        new
                        {
                            CorrespondingUtcZone = "7",
                            Abbreviation = "WIB",
                            Name = "Western Indonesian Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_western_indonesian_time",
                            TimeZoneId = new Guid("eba26378-bcce-4723-b63c-1792382a29e0")
                        },
                        new
                        {
                            CorrespondingUtcZone = "9",
                            Abbreviation = "WIT",
                            Name = "Eastern Indonesian Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_eastern_indonesian_time",
                            TimeZoneId = new Guid("e54da034-5d78-47a1-993e-99917f5821e4")
                        },
                        new
                        {
                            CorrespondingUtcZone = "8",
                            Abbreviation = "WITA",
                            Name = "Central Indonesian Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_central_indonesian_time",
                            TimeZoneId = new Guid("f84f3b22-7b6f-4c03-b77b-fb751bce5c14")
                        },
                        new
                        {
                            CorrespondingUtcZone = "13",
                            Abbreviation = "WST",
                            Name = "West Samoa Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_west_samoa_time",
                            TimeZoneId = new Guid("ac84f112-f5b2-4711-a68c-2aaef1c1df47")
                        },
                        new
                        {
                            CorrespondingUtcZone = "8",
                            Abbreviation = "WST",
                            Name = "Western Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_western_standard_time",
                            TimeZoneId = new Guid("caf75ecd-c0a7-4216-b50a-6f3b60b72f93")
                        },
                        new
                        {
                            CorrespondingUtcZone = "0",
                            Abbreviation = "WT",
                            Name = "Western Sahara Standard Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_western_sahara_standard_time",
                            TimeZoneId = new Guid("94b768ce-337f-4928-9500-37d4c5324e0d")
                        },
                        new
                        {
                            CorrespondingUtcZone = "9",
                            Abbreviation = "YAKT",
                            Name = "Yakutsk Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_yakutsk_time",
                            TimeZoneId = new Guid("daf02608-b8a1-4f35-b7f4-2e725188d153")
                        },
                        new
                        {
                            CorrespondingUtcZone = "10",
                            Abbreviation = "YAPT",
                            Name = "Yap Time",
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_yap_time",
                            TimeZoneId = new Guid("1fdc63b0-0d2b-4e0e-9926-f25cb5f08547")
                        },
                        new
                        {
                            CorrespondingUtcZone = "5",
                            Abbreviation = "YEKT",
                            Name = "Yekaterinburg Time",
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            DaylightSavingApplies = false,
                            LastModifiedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NameTrxCode = "timezone_name_yekaterinburg_time",
                            TimeZoneId = new Guid("fe9d118c-e82d-47c3-85f6-8620f954013f")
                        });
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Configuration.TopLevelDomain", b =>
                {
                    b.Property<Guid>("TopLevelDomainId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsImplemented")
                        .HasColumnType("bit")
                        .HasColumnOrder(3);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.HasKey("TopLevelDomainId");

                    b.HasIndex("CountryId");

                    b.HasIndex("Domain")
                        .IsUnique();

                    b.ToTable("TopLevelDomains", "config");

                    b.HasData(
                        new
                        {
                            TopLevelDomainId = new Guid("9d1ebe67-954b-4217-9b82-18bb08b1ede2"),
                            CountryId = 1L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "af",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("57384c73-511f-4488-b47c-cb5f07a44c1b"),
                            CountryId = 2L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ax",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("3b4e75ed-8677-419e-97e1-0dff7cdef4f1"),
                            CountryId = 3L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "al",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("d9d19544-7a33-45d7-a2bb-cdcdfea97978"),
                            CountryId = 4L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "dz",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("22a5ff07-2206-41f2-ade7-84bedeeecdd1"),
                            CountryId = 5L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "as",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("15bcdf3c-f286-4a3c-bd0f-95917eeee20a"),
                            CountryId = 6L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ad",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("ce0ddfdf-bc22-4f6a-b275-80f30694fea5"),
                            CountryId = 7L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ao",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("75c0fe2a-e2c8-4d3f-a923-ce210d78197c"),
                            CountryId = 8L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ai",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("979c5434-7118-42fe-bbc7-75ec8cb3c90c"),
                            CountryId = 9L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "aq",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("5f8a062d-c74e-4177-a90e-84688e35c044"),
                            CountryId = 10L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ag",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("3fa54555-26d6-47db-b3d9-5264f88b52c8"),
                            CountryId = 11L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ar",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("243e7b21-2915-4711-b49f-23b99f19c928"),
                            CountryId = 12L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "am",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("de953436-e182-499d-b96e-60c211efd1c1"),
                            CountryId = 13L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "aw",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("df414d00-7ab9-4a9a-a7ae-398e1710ef73"),
                            CountryId = 14L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "au",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("1ee6d7e5-dd7d-46a5-8368-dc85d3ab0001"),
                            CountryId = 15L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "at",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("df4e4296-7cd4-4778-8a2b-9101821e79e0"),
                            CountryId = 16L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "az",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("46c6cc8e-a47a-44b9-977d-515e96f1ac7f"),
                            CountryId = 17L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "bs",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("2c9b9831-025e-4293-9353-cb595572e27e"),
                            CountryId = 18L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "bh",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("ff70b70d-5ad9-4384-8618-f38aa3b71428"),
                            CountryId = 19L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "bd",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("592b8fa8-07b1-4633-a3a6-b7aa30b93db3"),
                            CountryId = 20L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "bb",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("adf86d89-c120-4cd0-9841-5664b280ede2"),
                            CountryId = 21L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "by",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("adafb987-5c82-4065-ba45-649d02b83887"),
                            CountryId = 22L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "be",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("027bbb33-0052-4382-a856-8cc23146317a"),
                            CountryId = 23L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "bz",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("79056f23-4b70-426b-b660-49b8107b3599"),
                            CountryId = 24L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "bj",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("d46b95ee-a45b-4716-942c-3874c1712bc5"),
                            CountryId = 25L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "bm",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("6314d727-eba2-4083-873d-71cc4e17ddfc"),
                            CountryId = 26L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "bt",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("5820cb7e-37bf-4caa-9c70-290d3b006986"),
                            CountryId = 27L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "bo",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("de764772-3dc3-4070-b7d2-2a9c76d0e218"),
                            CountryId = 28L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "bq.nl",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("f75b6c2a-b5ff-404b-a9f2-2a5bfd304360"),
                            CountryId = 29L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ba",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("a4c42c23-5b01-430e-863e-42f24c3b8a17"),
                            CountryId = 30L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "bw",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("f3a9dc6a-d43d-48dc-92ce-5a7b3333042e"),
                            CountryId = 31L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "bv",
                            IsImplemented = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("efc58f9c-5181-4b19-ba82-2a561f3a595b"),
                            CountryId = 32L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "br",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("c96d1172-f011-445d-9829-e5ba02e71e73"),
                            CountryId = 33L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "io",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("b040474e-6e2b-40c4-93f2-9548e6029910"),
                            CountryId = 34L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "bn",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("866f447a-83d4-4fb7-aca1-c77226eef755"),
                            CountryId = 35L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "bg",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("2b93c5ac-9c66-4aef-bac1-488b132a59dd"),
                            CountryId = 36L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "bf",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("73e2abc1-a4c8-4f37-bbe2-1926a2149c9f"),
                            CountryId = 37L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "bi",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("fe13ad03-b316-4eec-92e9-1f9ddeb70073"),
                            CountryId = 38L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "cv",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("b549762e-ec4a-481c-973c-41bb2639ac45"),
                            CountryId = 39L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "kh",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("55ca304d-37d6-489b-a668-fa7b01e7db9f"),
                            CountryId = 40L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "cm",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("eb2b848e-d50a-4fe5-9595-83fa517b2ec2"),
                            CountryId = 41L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ca",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("a8b459aa-9b88-46fa-8ec0-80a6fe557dda"),
                            CountryId = 42L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ky",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("b935b965-c9c4-4c99-8121-c3e846ddba7f"),
                            CountryId = 43L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "cf",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("95bd15fb-6ef0-48eb-a736-41db6e9f03c2"),
                            CountryId = 44L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "td",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("177d4efb-c449-4557-85e2-8d0172db92b8"),
                            CountryId = 45L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "cl",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("98efb068-36e3-437d-978a-9caeac2f3eac"),
                            CountryId = 46L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "cn",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("1f7f99af-fb34-4b56-a343-329d2dbb4855"),
                            CountryId = 47L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "cx",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("5865ffbe-83e8-43c5-b2a9-ad4a388dbd9a"),
                            CountryId = 48L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "cc",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("6f5e92d6-71a4-42a7-97bb-75a8d03652b7"),
                            CountryId = 49L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "co",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("f3090090-f8b7-47d5-b1c4-8ce05d1675f5"),
                            CountryId = 50L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "km",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("7714ef6d-1f97-4dc3-afde-ba48f25da95f"),
                            CountryId = 51L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "cd",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("70a3febe-d579-4b9c-86b5-02205138a1b2"),
                            CountryId = 52L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "cg",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("d72332ad-b0ce-4a29-a952-765e59845a75"),
                            CountryId = 53L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ck",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("d387e16c-fc7e-401f-bcd3-f477442b59e0"),
                            CountryId = 54L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "cr",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("87a1f57e-6536-4f11-b42d-f337d05200bf"),
                            CountryId = 55L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ci",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("ad23df61-dfab-446c-a929-2f4bcb1b70f3"),
                            CountryId = 56L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "hr",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("631b262b-8290-45c3-8872-35029ee408f9"),
                            CountryId = 57L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "cu",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("99b4c15d-370b-4c55-8f92-96d4bda19a1b"),
                            CountryId = 58L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "cw",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("714d854c-604c-4410-b66d-f6a878e90405"),
                            CountryId = 59L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "cy",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("8898c6ec-a735-496b-b65b-30b822e6a2fc"),
                            CountryId = 60L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "cz",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("e31209a8-17e7-4ecf-a35e-12b2da46f53b"),
                            CountryId = 61L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "dk",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("cc134b62-7d4a-4c4b-9692-a0509587ad77"),
                            CountryId = 62L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "dj",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("4bac53ca-899f-40b6-bf06-56f4779023f2"),
                            CountryId = 63L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "dm",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("5bc1fffa-2368-49c0-beba-d294b73f7019"),
                            CountryId = 64L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "do",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("98cef487-f352-4560-9af1-8a7459c875dd"),
                            CountryId = 65L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ec",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("a849b003-a398-4e67-b90c-bd96df8ae9a8"),
                            CountryId = 66L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "eg",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("7e89eaf1-5df9-4d1b-a65a-7ce5d76ddd16"),
                            CountryId = 67L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "sv",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("19c1d3fb-a77b-4940-a894-5edee5df46ea"),
                            CountryId = 68L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "gq",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("5d033fef-c396-41e6-89c8-5e5762d79b47"),
                            CountryId = 69L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "er",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("b504c431-262c-423d-91f6-e1bf8ef6b3bd"),
                            CountryId = 70L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ee",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("48ac7530-218c-4221-bf3c-9a18f1a0d67a"),
                            CountryId = 71L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "sz",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("61767884-6c42-49af-bac4-51b801ff7d1f"),
                            CountryId = 72L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "et",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("242c849e-969e-494f-b500-4e56419cdbeb"),
                            CountryId = 73L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "fk",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("bec2168d-88b3-4df0-80ce-0dbf52007b1b"),
                            CountryId = 74L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "fo",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("59316263-31f3-4b20-9605-942d8ed7b6a5"),
                            CountryId = 75L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "fj",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("aa2cefc3-4bfa-48dc-871f-1132220f96e7"),
                            CountryId = 76L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "fi",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("8c69930b-f082-420b-b5ac-b78cb758a730"),
                            CountryId = 77L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "fr",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("a2fbe716-24cc-4d58-814e-771095de536b"),
                            CountryId = 78L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "gf",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("37009bc4-f2d6-4603-87f0-a4528160148e"),
                            CountryId = 79L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "pf",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("a75729ff-a31a-4e6a-84b0-5938827ba81d"),
                            CountryId = 80L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "tf",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("ce63f14b-bac6-4177-9052-17c1991c8cc7"),
                            CountryId = 81L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ga",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("e97eb580-accf-41e8-89a6-d4566760fa58"),
                            CountryId = 82L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "gm",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("fde1117b-bc0b-4482-ad7c-7a02a2653d20"),
                            CountryId = 83L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ge",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("72dc9f92-d8d2-44ab-a7bc-6de663734f98"),
                            CountryId = 84L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "de",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("32739830-b374-4150-80cd-d7d176e4d747"),
                            CountryId = 85L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "gh",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("21cabec1-f759-430d-952c-c77c3cd5354b"),
                            CountryId = 86L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "gi",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("2704c9ff-fbad-4cd4-ba22-cbaeef24edd2"),
                            CountryId = 87L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "gr",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("231e5098-c807-4018-9592-27c23b061d52"),
                            CountryId = 88L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "gl",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("365f42ef-38a7-4d44-b0ad-4a3803300219"),
                            CountryId = 89L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "gd",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("fb293bd9-23e0-4a47-872d-69ca4d8b8916"),
                            CountryId = 90L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "gp",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("9cd198db-fc95-4f79-b0da-9be5f4b7f142"),
                            CountryId = 91L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "gu",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("29ba041e-b9cf-44c6-89ff-76ac8bfe15d0"),
                            CountryId = 92L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "gt",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("549a072f-92e3-461a-9b83-106ec032405b"),
                            CountryId = 93L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "gg",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("6c3e19f3-e2bd-46eb-bc8b-3c6b9743c6b9"),
                            CountryId = 94L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "gn",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("9e711ee1-98f0-4108-9d40-f150e28d641e"),
                            CountryId = 95L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "gw",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("16b47e60-ca99-4a54-9a81-806e2b0550ab"),
                            CountryId = 96L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "gy",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("e48542d6-f4c2-49c0-8c91-b49be0111c27"),
                            CountryId = 97L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ht",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("363776e7-e6d5-415f-8b5a-8813d95193f4"),
                            CountryId = 98L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "hm",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("329648b3-9d64-4d91-abec-e0a8ca777bdd"),
                            CountryId = 99L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "va",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("d72a661e-f903-4c18-9d54-79a01202ed4c"),
                            CountryId = 100L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "hn",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("cdb9c0c0-a71f-4c33-907a-0b73ec9e3494"),
                            CountryId = 101L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "hk",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("c8d80c6f-2fc4-45b6-b467-50101d7edae3"),
                            CountryId = 102L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "hu",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("24290b68-c722-498e-aacb-b1cc94d819cd"),
                            CountryId = 103L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "is",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("79a3984a-c2cf-47a4-988c-f78a4f17f9f0"),
                            CountryId = 104L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "in",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("e2d93796-9abb-4c48-b0f6-90c5b9a60279"),
                            CountryId = 105L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "id",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("547924e3-bcb6-4746-98d1-132a09849025"),
                            CountryId = 106L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ir",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("d3934553-d09a-41a0-99c4-e496dadf3dd3"),
                            CountryId = 107L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "iq",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("8fad4d37-50c7-48e4-9aea-8405a77d5414"),
                            CountryId = 108L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ie",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("7b79def5-45f7-4f9a-aaa1-af1a7c5ec268"),
                            CountryId = 109L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "im",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("b5dd4c70-f997-46b4-a036-1731ccaca068"),
                            CountryId = 110L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "il",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("8138b651-d5e9-4d39-8651-769942c66a9a"),
                            CountryId = 111L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "it",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("c3fdd866-61ef-4b00-a987-d07e4360d53a"),
                            CountryId = 112L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "jm",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("8be30ab5-dd39-454b-bd16-96d8dd142f99"),
                            CountryId = 113L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "jp",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("3ad5680a-eb13-42ee-9718-51e33f7c5ac6"),
                            CountryId = 114L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "je",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("18773161-1dc3-4e37-84a6-cf299391a93d"),
                            CountryId = 115L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "jo",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("6295ca0d-2036-43f5-b5fe-7fdd8fcd395f"),
                            CountryId = 116L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "kz",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("1d882cdb-bdb0-4112-95da-bcd72ed466d2"),
                            CountryId = 117L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ke",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("63a01740-1f47-4710-8aca-9aafef4db890"),
                            CountryId = 118L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ki",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("a5a092e1-f558-42d5-92ff-8f5ffbfaa7a0"),
                            CountryId = 119L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "kp",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("526d0971-5960-4c77-9c48-3febb643f904"),
                            CountryId = 120L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "kr",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("24de3719-a701-4e73-8509-77ae6e04bcfa"),
                            CountryId = 121L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "kw",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("5c1285c9-1fdc-4175-a86b-d2cca2204c03"),
                            CountryId = 122L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "kg",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("096d14ed-f8f0-4a78-8b77-8a88cb41f658"),
                            CountryId = 123L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "la",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("ba7f56ea-5251-41e0-9a05-668f03d7136a"),
                            CountryId = 124L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "lv",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("8678f309-eba5-4d99-a687-7ef9e58d9eda"),
                            CountryId = 125L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "lb",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("dfe6e493-a9c2-4c01-bfb0-beee778d22f3"),
                            CountryId = 126L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ls",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("cbe95acb-be87-4312-8188-63ceb7910b76"),
                            CountryId = 127L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "lr",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("21b54c82-87be-4410-9a25-dbb0a302642c"),
                            CountryId = 128L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ly",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("69559e84-024d-4755-8c3d-a290c81ea660"),
                            CountryId = 129L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "li",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("35574551-897d-4e5d-a146-08cde064db84"),
                            CountryId = 130L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "lt",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("e3e8ed55-cd64-4e77-b5da-941c404f57bf"),
                            CountryId = 131L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "lu",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("3855e9b7-50f6-4315-9315-700b1c949a71"),
                            CountryId = 132L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "mo",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("de037e52-f4e7-4c5a-91f4-01359cc2f079"),
                            CountryId = 133L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "mk",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("518d55c2-5ba1-4040-9b7d-c87dbfb75686"),
                            CountryId = 134L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "mg",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("471d291f-e795-4343-a1b4-bfbe3ffd11e5"),
                            CountryId = 135L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "mw",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("26499a54-bcab-4921-8bb4-893c2fc240e2"),
                            CountryId = 136L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "my",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("9c93b5eb-b1f8-4f7c-b9fd-f34da6e796ad"),
                            CountryId = 137L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "mv",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("25dffe65-1896-4adf-aef6-fdf0200235ea"),
                            CountryId = 138L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ml",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("693f9671-da6e-4689-81d7-824b1bad5275"),
                            CountryId = 139L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "mt",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("32073e7a-a39f-42f7-b05e-a7d89206c78c"),
                            CountryId = 140L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "mh",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("cf9e7090-6017-42d1-a39d-1bcdbc528efa"),
                            CountryId = 141L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "mq",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("5a9a825d-28c1-4193-863b-44890f695215"),
                            CountryId = 142L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "mr",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("f733f17f-8a75-47f4-9a73-244d40b760e7"),
                            CountryId = 143L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "mu",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("87b72b9b-5267-478a-bfe2-9507ea53364a"),
                            CountryId = 144L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "yt",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("959148f1-d193-4660-a5ea-6c8cda370402"),
                            CountryId = 145L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "mx",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("aa85e0ce-869c-4dbf-89bd-4a55f8adbede"),
                            CountryId = 146L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "fm",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("fa02111a-ed52-4591-b4da-170e4bc6f1b9"),
                            CountryId = 147L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "md",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("f105a9ff-e39d-4951-aa58-72df41889849"),
                            CountryId = 148L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "mc",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("2dcc0d11-4051-4cc0-9c2c-a8649e4a35a5"),
                            CountryId = 149L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "mn",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("0a66da3e-96d9-4103-a89a-000ebeb944f9"),
                            CountryId = 150L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "me",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("38eee82f-066f-4f7e-9e48-479e9a7622b8"),
                            CountryId = 151L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ms",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("858f02d7-5995-4688-8c55-547fdeca30f5"),
                            CountryId = 152L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ma",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("d55ecbcc-c82e-4700-8b8d-a366a59e1683"),
                            CountryId = 153L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "mz",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("13b3c70f-7e34-447c-91e2-633682e9260a"),
                            CountryId = 154L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "mm",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("96f0c18f-2740-4c02-a7bf-173adbc28fe0"),
                            CountryId = 155L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "na",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("713691bf-4a8b-4df2-b00c-243f3d0b4db8"),
                            CountryId = 156L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "nr",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("14d2b9d2-46d1-4309-a7d7-3e800835f448"),
                            CountryId = 157L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "np",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("1d33cd4c-8242-4484-aaf5-8018f06e6e79"),
                            CountryId = 158L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "nl",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("cbd0c1e4-9412-470f-8800-589f335108cf"),
                            CountryId = 159L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "nc",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("f884da6a-89a5-4ce5-8049-d2fe5c2284a5"),
                            CountryId = 160L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "nz",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("7b58c078-ca0d-44d4-a8c9-4cc742c19467"),
                            CountryId = 161L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ni",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("de652552-27bc-4c9f-a534-f9df8e604b61"),
                            CountryId = 162L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ne",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("fa031865-4cc2-450f-9e11-7cea1a3fa538"),
                            CountryId = 163L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ng",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("38c0f0f7-149c-4b78-8d77-f8d2df7c7abe"),
                            CountryId = 164L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "nu",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("461542f0-2382-4eca-a112-f59936874d6e"),
                            CountryId = 165L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "nf",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("3daec8ec-d6db-4ccc-bcde-dbcd55f11f4a"),
                            CountryId = 166L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "mp",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("f90b4cb5-0bda-4589-9ca9-0184be138d4a"),
                            CountryId = 167L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "no",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("391aa354-13d8-463c-9c1d-f4fd2b8cbc1c"),
                            CountryId = 168L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "om",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("70e3e8f7-1e6e-440c-931a-1a287b587186"),
                            CountryId = 169L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "pk",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("aeb16ed5-49cc-4a0e-8f2c-ba05910ebd6d"),
                            CountryId = 170L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "pw",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("272da3e7-0123-41f0-ac51-4b0331680337"),
                            CountryId = 171L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ps",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("5cd8939b-3265-47cd-8213-6adea4b60206"),
                            CountryId = 172L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "pa",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("7f2ba6d1-e06f-4611-bd8f-02c114df67e4"),
                            CountryId = 173L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "pg",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("34ad0d6d-a1ad-42b2-b2b3-0dd4021f49c0"),
                            CountryId = 174L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "py",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("98be3bcc-0378-44ef-8927-7680c7473810"),
                            CountryId = 175L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "pe",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("29c1c3f7-88da-4549-9ab8-e7c918412f35"),
                            CountryId = 176L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ph",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("59cc2568-53e7-45fd-89c7-6d9827c6afbb"),
                            CountryId = 177L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "pn",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("17739145-6581-4e11-bc97-ae175fad4971"),
                            CountryId = 178L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "pl",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("b4a8bfad-6cb2-4b9a-beb7-17c387de97d4"),
                            CountryId = 179L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "pt",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("e505010c-3a42-4159-9739-9116eb8cdda0"),
                            CountryId = 180L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "pr",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("17464404-ad94-4f1f-ad8f-a7e511416d9f"),
                            CountryId = 181L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "qa",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("aa28c7b2-c93e-46c5-9ad6-569879fc2eb9"),
                            CountryId = 182L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "re",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("638b27e4-480a-4a69-9fa5-16af6b0dd940"),
                            CountryId = 183L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ro",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("ce010369-d47f-4f49-addb-479a71187804"),
                            CountryId = 184L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ru",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("d5a696c9-9ab0-40ee-a852-5e2ba9fcc3e6"),
                            CountryId = 185L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "rw",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("fb97cb17-0371-49e6-b7ac-57cc94a09f61"),
                            CountryId = 186L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "bl",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("fe4e1316-c338-4f47-b493-23b0d11ecd62"),
                            CountryId = 187L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "sh",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("d1de73df-2aff-40df-8d33-3f0d2fbd9fce"),
                            CountryId = 188L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "kn",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("e9d1a276-b1d9-4876-b6a5-86c5e98f3f78"),
                            CountryId = 189L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "lc",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("efb0ced7-2466-4cbb-8a20-3d22f78846d1"),
                            CountryId = 190L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "mf",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("a1bbea9c-58e7-452b-a2f8-c423d96d283b"),
                            CountryId = 191L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "pm",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("9dbffd7b-975b-4c45-b6a1-0d64fb2ad789"),
                            CountryId = 192L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "vc",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("12f7d31f-0a58-43de-b583-c4e46f56e57c"),
                            CountryId = 193L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ws",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("322e041d-1464-49e8-9507-89766cd99eef"),
                            CountryId = 194L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "sm",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("3a04cc4b-6a0b-4c06-8a34-58937cfddb2f"),
                            CountryId = 195L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "st",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("8329f3ca-e85e-4095-a050-72d1110b0f9f"),
                            CountryId = 196L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "sa",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("ef453f4f-de94-4b8c-82e6-9d5f3f80c70b"),
                            CountryId = 197L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "sn",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("4c16e1ef-4e6f-4156-998f-cf1795b15180"),
                            CountryId = 198L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "rs",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("a4073ec0-ad1a-4df6-a119-88dee82df613"),
                            CountryId = 199L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "sc",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("46e8ece1-fb10-4c46-9e5b-6b8390cf4cb0"),
                            CountryId = 200L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "sl",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("7aac7f8f-dae4-4cc2-a62e-da209993f3b3"),
                            CountryId = 201L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "sg",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("b6bd87db-9300-4eb0-8cf0-99aeb4a639d2"),
                            CountryId = 202L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "sx",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("8212ab49-52eb-4d8c-b6f6-d7cd5506aed0"),
                            CountryId = 203L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "sk",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("5655241a-6c36-4643-8f0d-0fd9301ff6e0"),
                            CountryId = 204L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "si",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("8b047175-3737-4b3f-ae99-ea67c0d67dad"),
                            CountryId = 205L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "sb",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("15a158b3-4686-4210-94db-6f9b73c99332"),
                            CountryId = 206L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "so",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("aabd4404-5baa-43a5-b2a2-4a1b32f95463"),
                            CountryId = 207L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "za",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("8531d22a-e4da-4e63-86b5-b0d87328ff5f"),
                            CountryId = 208L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "gs",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("6c79cb04-864b-47f9-8684-24070424bcaa"),
                            CountryId = 209L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ss",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("2b80b7c5-d9e7-4ff5-b094-38113397cbd2"),
                            CountryId = 210L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "es",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("1b1ad134-9f6b-467a-844d-150b04906f6a"),
                            CountryId = 211L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "lk",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("244c4bab-636a-44a7-ba21-c03f75271ecc"),
                            CountryId = 212L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "sd",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("082a73ea-8b77-4615-b29d-a65f1d749c7b"),
                            CountryId = 213L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "sr",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("0848232d-0bc9-4c97-9e3b-3451aff31a58"),
                            CountryId = 214L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "sj",
                            IsImplemented = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("d1a91fe6-6e54-4e58-854c-bbc9f08f22dd"),
                            CountryId = 215L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "se",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("3f2a8ebc-202e-485d-ae12-0c95e7a55057"),
                            CountryId = 216L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ch",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("5c264b44-e8c4-4ba9-b783-0f1b7d20dc35"),
                            CountryId = 217L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "sy",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("7c12d733-be51-414a-8a57-627051d773d9"),
                            CountryId = 218L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "tw",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("f4dffff9-2487-404a-a554-baf7bffcfd70"),
                            CountryId = 219L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "tj",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("3c1a72b5-3977-43fc-90ca-bf9c3ec00f4e"),
                            CountryId = 220L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "tz",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("bae6ac01-31bc-49b8-ba4f-a173b2fd91a0"),
                            CountryId = 221L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "th",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("712b3908-161f-47cf-a068-efb65f61d900"),
                            CountryId = 222L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "tl",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("01076970-a0b9-459c-bbb9-9f72cd237296"),
                            CountryId = 223L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "tg",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("7773dba5-be41-421a-8b55-0354bfdc6c6d"),
                            CountryId = 224L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "tk",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("3ae772ca-10d1-47f6-b46a-eb8b99b7feee"),
                            CountryId = 225L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "to",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("93868440-1fda-4a25-af55-cdc16cc38c2c"),
                            CountryId = 226L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "tt",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("de7ff6b2-a744-4e24-a2cf-a48f009cdd69"),
                            CountryId = 227L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "tn",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("5c32fcd1-d962-458a-a888-dc6244c6cbec"),
                            CountryId = 228L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "tr",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("538e7585-cf50-49e2-8398-5f51e3715cd0"),
                            CountryId = 229L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "tm",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("829fc8a2-be81-47fc-b5f1-b2eff6696f1b"),
                            CountryId = 230L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "tc",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("5fba22b1-1c8a-4d4e-ab27-724438068128"),
                            CountryId = 231L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "tv",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("986d0e8a-8516-45fc-a5e1-36c50ecde14b"),
                            CountryId = 232L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ug",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("b18ee36d-7a38-475c-92db-f1e5f8f09bf8"),
                            CountryId = 233L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ua",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("e7028f53-6739-4225-9469-feaca3342954"),
                            CountryId = 234L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ae",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("3b850cb4-7fcb-4654-95db-fd1863ab66da"),
                            CountryId = 235L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "uk",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("14cbb46c-532e-4382-8dde-edf9a99024d6"),
                            CountryId = 235L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "gb",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("e8e2d7ce-a26e-404c-a1ed-3846d4272334"),
                            CountryId = 236L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "um",
                            IsImplemented = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("ae7efee8-69d2-42d9-87d1-7f46caba780f"),
                            CountryId = 237L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "us",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("2b1115cb-1333-4712-b7ac-6de23aa84b6e"),
                            CountryId = 238L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "uy",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("4327f779-b05c-4951-83dd-6670fc9718e8"),
                            CountryId = 239L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "uz",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("8eaa002b-f1c4-4261-af0b-e86e93440b01"),
                            CountryId = 240L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "vu",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("282f47fb-c45f-4d72-b647-c4e9d8e64060"),
                            CountryId = 241L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ve",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("717950dc-3f30-4993-aeae-0129c3babbe8"),
                            CountryId = 242L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "vn",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("dc57ce7d-8505-49f7-a3c4-5c18d9f46cbb"),
                            CountryId = 243L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "vg",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("3629aaca-b73e-42cc-b4cf-eff6daab2b06"),
                            CountryId = 244L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "vi",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("895ab7fa-37c9-4737-96e4-2d253be74f0e"),
                            CountryId = 245L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "wf",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("f2c4f97c-fa1c-44cb-b966-569ea362a6ca"),
                            CountryId = 246L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "eh",
                            IsImplemented = false,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("0cec773c-e941-413a-874d-ab3d38927752"),
                            CountryId = 247L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "ye",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("ab57b3ef-2aa1-468d-addd-a354d49dc19b"),
                            CountryId = 248L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "zm",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            TopLevelDomainId = new Guid("757e6914-1de4-49fa-bb5b-55ab3095dc60"),
                            CountryId = 249L,
                            CreatedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0)),
                            Domain = "zw",
                            IsImplemented = true,
                            LastModifiedBy = new Guid("11111111-1111-1111-1111-111111111111"),
                            LastModifiedTimestamp = new DateTimeOffset(new DateTime(2023, 11, 26, 1, 4, 44, 315, DateTimeKind.Unspecified).AddTicks(9348), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.ContactInformation.EmailAddress", b =>
                {
                    b.Property<Guid>("EmailAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnOrder(1);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.HasKey("EmailAddressId");

                    b.ToTable("EmailAddresses", "contact");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.ContactInformation.MessengerUsername", b =>
                {
                    b.Property<Guid>("MessengerUsernameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnOrder(1);

                    b.HasKey("MessengerUsernameId");

                    b.ToTable("InstantMessengerUsernames", "contact");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.ContactInformation.PhoneNumber", b =>
                {
                    b.Property<Guid>("PhoneNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnOrder(1);

                    b.HasKey("PhoneNumberId");

                    b.ToTable("PhoneNumbers", "contact");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Content.AudioClip", b =>
                {
                    b.Property<Guid>("AudioClipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("Caption")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<string>("Copyright")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnOrder(3);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)")
                        .HasColumnOrder(1);

                    b.HasKey("AudioClipId");

                    b.ToTable("AudioClips", "content");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Content.Comment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<Guid?>("TargetAudioId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(7);

                    b.Property<Guid?>("TargetCommentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("TargetContentCollectionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(9);

                    b.Property<Guid?>("TargetGifId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8);

                    b.Property<Guid?>("TargetImageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(5);

                    b.Property<Guid?>("TargetLinkId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(10);

                    b.Property<long?>("TargetPostId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<Guid?>("TargetVideoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(6);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnOrder(1);

                    b.HasKey("CommentId");

                    b.HasIndex("TargetAudioId");

                    b.HasIndex("TargetCommentId");

                    b.HasIndex("TargetContentCollectionId");

                    b.HasIndex("TargetGifId");

                    b.HasIndex("TargetImageId");

                    b.HasIndex("TargetLinkId");

                    b.HasIndex("TargetPostId");

                    b.HasIndex("TargetVideoId");

                    b.ToTable("Comments", "content");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Content.ContentCollection", b =>
                {
                    b.Property<Guid>("ContentCollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("Caption")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnOrder(3);

                    b.Property<int>("CollectionType")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("Copyright")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnOrder(4);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnOrder(1);

                    b.HasKey("ContentCollectionId");

                    b.ToTable("ContentCollections", "content");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Content.ContentCollectionItem", b =>
                {
                    b.Property<Guid>("ContentCollectionItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid?>("AudioId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(6);

                    b.Property<Guid>("ContentCollectionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<Guid?>("GifId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(7);

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(4);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<Guid?>("LinkId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(3);

                    b.Property<int>("MediaType")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<Guid?>("VideoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(5);

                    b.HasKey("ContentCollectionItemId");

                    b.HasIndex("AudioId");

                    b.HasIndex("ContentCollectionId");

                    b.HasIndex("GifId");

                    b.HasIndex("ImageId");

                    b.HasIndex("LinkId");

                    b.HasIndex("VideoId");

                    b.ToTable("ContentCollectionItems", "content");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Content.ContentSafetyRating", b =>
                {
                    b.Property<Guid>("ContentSafetyRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnOrder(2);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.HasKey("ContentSafetyRatingId");

                    b.ToTable("ContentSafetyRatings", "content");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Content.ExternalContentSubscription", b =>
                {
                    b.Property<Guid>("ExternalContentSubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("CharSet")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(5);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnOrder(3);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<string>("Locale")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4);

                    b.Property<Guid>("PreviewImageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(9);

                    b.Property<string>("Robots")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(6);

                    b.Property<string>("SiteName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(7);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnOrder(2);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnOrder(1);

                    b.HasKey("ExternalContentSubscriptionId");

                    b.HasIndex("PreviewImageId");

                    b.ToTable("ExternalContentSubscriptions", "content");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Content.Feeling", b =>
                {
                    b.Property<Guid>("FeelingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<string>("IconName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnOrder(3);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(1);

                    b.Property<string>("NameTrxCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<string>("ShortCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnOrder(5);

                    b.Property<string>("UnicodeIcon")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnOrder(4);

                    b.HasKey("FeelingId");

                    b.HasIndex("NameTrxCode")
                        .IsUnique();

                    b.ToTable("Feelings", "content");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Content.Image", b =>
                {
                    b.Property<Guid>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("Caption")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<string>("Copyright")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnOrder(3);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)")
                        .HasColumnOrder(1);

                    b.HasKey("ImageId");

                    b.ToTable("Images", "content");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Content.Link", b =>
                {
                    b.Property<Guid>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("CharSet")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(5);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnOrder(3);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<string>("Locale")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4);

                    b.Property<Guid>("PreviewImageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8);

                    b.Property<string>("Robots")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(6);

                    b.Property<string>("SiteName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(7);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnOrder(2);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnOrder(1);

                    b.HasKey("LinkId");

                    b.HasIndex("PreviewImageId");

                    b.ToTable("Links", "content");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Content.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnOrder(1);

                    b.HasKey("LocationId");

                    b.ToTable("Locations", "content");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Content.Post", b =>
                {
                    b.Property<long>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PostId"));

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<string>("Text")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnOrder(1);

                    b.HasKey("PostId");

                    b.ToTable("Posts", "content");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Content.PostAttachment", b =>
                {
                    b.Property<Guid>("PostAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid?>("AudioClipId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(7);

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnOrder(2);

                    b.Property<Guid?>("ContentCollectionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(8);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<Guid?>("FeelingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(10);

                    b.Property<Guid?>("GifId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(9);

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(5);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<Guid?>("LinkId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(11);

                    b.Property<long?>("PostId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnOrder(1);

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<Guid?>("VideoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(6);

                    b.HasKey("PostAttachmentId");

                    b.HasIndex("AudioClipId");

                    b.HasIndex("ContentCollectionId");

                    b.HasIndex("FeelingId");

                    b.HasIndex("GifId");

                    b.HasIndex("ImageId");

                    b.HasIndex("LinkId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PostId");

                    b.HasIndex("VideoId");

                    b.ToTable("PostAttachments", "content");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Content.Reaction", b =>
                {
                    b.Property<Guid>("ReactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<string>("IconName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnOrder(3);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(1);

                    b.Property<string>("NameTrxCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<string>("UnicodeIcon")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnOrder(4);

                    b.HasKey("ReactionId");

                    b.HasIndex("NameTrxCode")
                        .IsUnique();

                    b.ToTable("Reactions", "content");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Content.Tag", b =>
                {
                    b.Property<Guid>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid?>("AudienceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(1);

                    b.HasKey("TagId");

                    b.HasIndex("AudienceId");

                    b.HasIndex("Text")
                        .IsUnique();

                    b.ToTable("Tags", "content");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Content.Video", b =>
                {
                    b.Property<Guid>("VideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("Caption")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<string>("Copyright")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnOrder(3);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)")
                        .HasColumnOrder(1);

                    b.HasKey("VideoId");

                    b.ToTable("Videos", "content");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Identity.UserAccount", b =>
                {
                    b.Property<Guid>("UserAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(10);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnOrder(20);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnOrder(4);

                    b.Property<short>("FailedAccessCount")
                        .HasColumnType("smallint")
                        .HasColumnOrder(17);

                    b.Property<bool>("IsEmailAddressConfirmed")
                        .HasColumnType("bit")
                        .HasColumnOrder(6);

                    b.Property<bool>("IsLockoutEnabled")
                        .HasColumnType("bit")
                        .HasColumnOrder(16);

                    b.Property<bool>("IsPhoneNumberConfirmed")
                        .HasColumnType("bit")
                        .HasColumnOrder(13);

                    b.Property<bool>("IsTwoFactorEnabled")
                        .HasColumnType("bit")
                        .HasColumnOrder(14);

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnOrder(19);

                    b.Property<DateTimeOffset>("LastLoginTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(21);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(15);

                    b.Property<string>("NormalizedEmailAddress")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnOrder(5);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(3);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(7);

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(8);

                    b.Property<string>("PhoneCountryCodeISO")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnOrder(12);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnOrder(11);

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(9);

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(18);

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.HasKey("UserAccountId");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("UserAccounts", "iam");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Identity.UserAccountRoleRel", b =>
                {
                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<Guid>("UserRoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(3);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.HasKey("UserAccountId", "UserRoleId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserAccountRoleRel", "iam");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Identity.UserRole", b =>
                {
                    b.Property<Guid>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserRoleId");

                    b.ToTable("UserRoles", "iam");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Peers.Peer", b =>
                {
                    b.Property<Guid>("PeerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnOrder(6);

                    b.Property<short>("Age")
                        .HasColumnType("smallint")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("AudienceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AudienceId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsMuted")
                        .HasColumnType("bit")
                        .HasColumnOrder(9);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(3);

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnOrder(7);

                    b.Property<string>("PeerAccessToken")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnOrder(8);

                    b.Property<Guid?>("PeerCircleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Sex")
                        .HasColumnType("int")
                        .HasColumnOrder(5);

                    b.Property<Guid>("VirtualProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.HasKey("PeerId");

                    b.HasIndex("Address")
                        .IsUnique();

                    b.HasIndex("AudienceId");

                    b.HasIndex("AudienceId1");

                    b.HasIndex("PeerCircleId");

                    b.HasIndex("VirtualProfileId")
                        .IsUnique();

                    b.ToTable("Peers", "dbo");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Peers.PeerCircle", b =>
                {
                    b.Property<Guid>("PeerCircleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(3);

                    b.Property<string>("DescriptionTrxCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsUserDefined")
                        .HasColumnType("bit")
                        .HasColumnOrder(6);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<string>("NameTrxCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.HasKey("PeerCircleId");

                    b.ToTable("PeerCircles", "dbo");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Peers.PeerConnectionRequestReceived", b =>
                {
                    b.Property<Guid>("PeerConnectionRequestReceivedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnOrder(5);

                    b.Property<short>("Age")
                        .HasColumnType("smallint")
                        .HasColumnOrder(3);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnOrder(6);

                    b.Property<string>("PeerPreviewAccessToken")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnOrder(7);

                    b.Property<int>("Sex")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.HasKey("PeerConnectionRequestReceivedId");

                    b.HasIndex("Address")
                        .IsUnique();

                    b.ToTable("PeerConnectionRequestsReceived", "dbo");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Peers.PeerConnectionRequestSubmitted", b =>
                {
                    b.Property<Guid>("PeerConnectionRequestSubmittedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnOrder(5);

                    b.Property<short>("Age")
                        .HasColumnType("smallint")
                        .HasColumnOrder(3);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid?>("DeactivatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99995);

                    b.Property<string>("DeactivatedReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(99994);

                    b.Property<DateTimeOffset?>("DeactivatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99993);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(1);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2);

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnOrder(6);

                    b.Property<string>("PeerPreviewAccessToken")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnOrder(7);

                    b.Property<int>("Sex")
                        .HasColumnType("int")
                        .HasColumnOrder(4);

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnOrder(8);

                    b.HasKey("PeerConnectionRequestSubmittedId");

                    b.HasIndex("Address")
                        .IsUnique();

                    b.ToTable("PeerConnectionRequestsSubmitted", "dbo");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.User.UserEmailAddressRelationship", b =>
                {
                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<Guid>("EmailAddressId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(3);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.HasKey("UserAccountId", "EmailAddressId");

                    b.HasIndex("EmailAddressId");

                    b.ToTable("UserEmailAddressRel", "user");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.User.UserMessengerUsernameRelationship", b =>
                {
                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<Guid>("MessengerUsernameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(3);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.HasKey("UserAccountId", "MessengerUsernameId");

                    b.HasIndex("MessengerUsernameId");

                    b.ToTable("MessengerUsernameRel", "user");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.User.UserPhoneNumberRelationship", b =>
                {
                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<Guid>("PhoneNumberId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(3);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.HasKey("UserAccountId", "PhoneNumberId");

                    b.HasIndex("PhoneNumberId");

                    b.ToTable("UserPhoneNumberRel", "user");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.User.UserProfile", b =>
                {
                    b.Property<Guid>("UserProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid?>("CoverPictureImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CoverPicturesCollectionContentCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(6);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(3);

                    b.Property<string>("Introduction")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnOrder(8);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(5);

                    b.Property<string>("MiddleNames")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("ProfilePictureImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfilePicturesCollectionContentCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Sex")
                        .HasColumnType("int")
                        .HasColumnOrder(7);

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.HasKey("UserProfileId");

                    b.HasIndex("CoverPictureImageId");

                    b.HasIndex("CoverPicturesCollectionContentCollectionId");

                    b.HasIndex("ProfilePictureImageId");

                    b.HasIndex("ProfilePicturesCollectionContentCollectionId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("UserProfiles", "user");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.User.UserProfileDetail", b =>
                {
                    b.Property<Guid>("UserProfileDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<short?>("DisplayOrder")
                        .IsRequired()
                        .HasColumnType("smallint")
                        .HasColumnOrder(7);

                    b.Property<string>("IconName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(6);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(3);

                    b.Property<string>("Label")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(4);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(5);

                    b.HasKey("UserProfileDetailId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("UserProfileDetails", "user");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Workflow.NewContentWorkflowStage", b =>
                {
                    b.Property<Guid>("NewContentWorkflowStageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("ContentEntityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(1);

                    b.Property<string>("ContentEntityTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<int>("Stage")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.HasKey("NewContentWorkflowStageId");

                    b.ToTable("NewContentWorkflowStage", "workflow");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Workflow.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99996);

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99998);

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnOrder(5);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(99997);

                    b.Property<DateTimeOffset>("LastModifiedTimestamp")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(99999);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnOrder(2);

                    b.Property<string>("SourceId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnOrder(4);

                    b.Property<int>("SourceType")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("NotificationId");

                    b.ToTable("Notifications", "workflow");
                });

            modelBuilder.Entity("CountryTimeZone", b =>
                {
                    b.Property<long>("CountriesCountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("TimeZonesCorrespondingUtcZone")
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("TimeZonesAbbreviation")
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("TimeZonesName")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CountriesCountryId", "TimeZonesCorrespondingUtcZone", "TimeZonesAbbreviation", "TimeZonesName");

                    b.HasIndex("TimeZonesCorrespondingUtcZone", "TimeZonesAbbreviation", "TimeZonesName");

                    b.ToTable("CountryTimeZone", "config");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Configuration.Audience", b =>
                {
                    b.HasOne("Astrana.Core.Data.Entities.User.UserProfileDetail", null)
                        .WithMany("Audiences")
                        .HasForeignKey("UserProfileDetailId");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Configuration.Country", b =>
                {
                    b.HasOne("Astrana.Core.Data.Entities.Configuration.Audience", null)
                        .WithMany("Countries")
                        .HasForeignKey("AudienceId");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Configuration.SystemSetting", b =>
                {
                    b.HasOne("Astrana.Core.Data.Entities.Configuration.SystemSettingCategory", "SettingCategory")
                        .WithMany("Settings")
                        .HasForeignKey("SettingCategoryId");

                    b.Navigation("SettingCategory");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Configuration.TopLevelDomain", b =>
                {
                    b.HasOne("Astrana.Core.Data.Entities.Configuration.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Content.Comment", b =>
                {
                    b.HasOne("Astrana.Core.Data.Entities.Content.AudioClip", "TargetAudio")
                        .WithMany()
                        .HasForeignKey("TargetAudioId");

                    b.HasOne("Astrana.Core.Data.Entities.Content.Comment", "TargetComment")
                        .WithMany()
                        .HasForeignKey("TargetCommentId");

                    b.HasOne("Astrana.Core.Data.Entities.Content.AudioClip", "TargetContentCollection")
                        .WithMany()
                        .HasForeignKey("TargetContentCollectionId");

                    b.HasOne("Astrana.Core.Data.Entities.Content.Image", "TargetGif")
                        .WithMany()
                        .HasForeignKey("TargetGifId");

                    b.HasOne("Astrana.Core.Data.Entities.Content.Image", "TargetImage")
                        .WithMany()
                        .HasForeignKey("TargetImageId");

                    b.HasOne("Astrana.Core.Data.Entities.Content.Link", "TargetLink")
                        .WithMany()
                        .HasForeignKey("TargetLinkId");

                    b.HasOne("Astrana.Core.Data.Entities.Content.Post", "TargetPost")
                        .WithMany()
                        .HasForeignKey("TargetPostId");

                    b.HasOne("Astrana.Core.Data.Entities.Content.Video", "TargetVideo")
                        .WithMany()
                        .HasForeignKey("TargetVideoId");

                    b.Navigation("TargetAudio");

                    b.Navigation("TargetComment");

                    b.Navigation("TargetContentCollection");

                    b.Navigation("TargetGif");

                    b.Navigation("TargetImage");

                    b.Navigation("TargetLink");

                    b.Navigation("TargetPost");

                    b.Navigation("TargetVideo");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Content.ContentCollectionItem", b =>
                {
                    b.HasOne("Astrana.Core.Data.Entities.Content.AudioClip", "Audio")
                        .WithMany()
                        .HasForeignKey("AudioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astrana.Core.Data.Entities.Content.ContentCollection", "ContentCollection")
                        .WithMany("ContentCollectionItems")
                        .HasForeignKey("ContentCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Astrana.Core.Data.Entities.Content.Image", "Gif")
                        .WithMany()
                        .HasForeignKey("GifId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astrana.Core.Data.Entities.Content.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astrana.Core.Data.Entities.Content.Link", "Link")
                        .WithMany()
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astrana.Core.Data.Entities.Content.Video", "Video")
                        .WithMany()
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Audio");

                    b.Navigation("ContentCollection");

                    b.Navigation("Gif");

                    b.Navigation("Image");

                    b.Navigation("Link");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Content.ExternalContentSubscription", b =>
                {
                    b.HasOne("Astrana.Core.Data.Entities.Content.Image", "PreviewImage")
                        .WithMany()
                        .HasForeignKey("PreviewImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PreviewImage");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Content.Link", b =>
                {
                    b.HasOne("Astrana.Core.Data.Entities.Content.Image", "PreviewImage")
                        .WithMany()
                        .HasForeignKey("PreviewImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PreviewImage");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Content.PostAttachment", b =>
                {
                    b.HasOne("Astrana.Core.Data.Entities.Content.AudioClip", "AudioClip")
                        .WithMany()
                        .HasForeignKey("AudioClipId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astrana.Core.Data.Entities.Content.ContentCollection", "ContentCollection")
                        .WithMany()
                        .HasForeignKey("ContentCollectionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astrana.Core.Data.Entities.Content.Feeling", "Feeling")
                        .WithMany()
                        .HasForeignKey("FeelingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astrana.Core.Data.Entities.Content.Image", "Gif")
                        .WithMany()
                        .HasForeignKey("GifId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astrana.Core.Data.Entities.Content.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astrana.Core.Data.Entities.Content.Link", "Link")
                        .WithMany()
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astrana.Core.Data.Entities.Content.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Astrana.Core.Data.Entities.Content.Post", null)
                        .WithMany("Attachments")
                        .HasForeignKey("PostId");

                    b.HasOne("Astrana.Core.Data.Entities.Content.Video", "Video")
                        .WithMany()
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AudioClip");

                    b.Navigation("ContentCollection");

                    b.Navigation("Feeling");

                    b.Navigation("Gif");

                    b.Navigation("Image");

                    b.Navigation("Link");

                    b.Navigation("Location");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Content.Tag", b =>
                {
                    b.HasOne("Astrana.Core.Data.Entities.Configuration.Audience", null)
                        .WithMany("Tags")
                        .HasForeignKey("AudienceId");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Identity.UserAccountRoleRel", b =>
                {
                    b.HasOne("Astrana.Core.Data.Entities.Identity.UserAccount", "UserAccount")
                        .WithMany("UserAccountRoles")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Astrana.Core.Data.Entities.Identity.UserRole", "UserRole")
                        .WithMany("UserAccountRoles")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Peers.Peer", b =>
                {
                    b.HasOne("Astrana.Core.Data.Entities.Configuration.Audience", null)
                        .WithMany("PeersExcluded")
                        .HasForeignKey("AudienceId");

                    b.HasOne("Astrana.Core.Data.Entities.Configuration.Audience", null)
                        .WithMany("PeersIncluded")
                        .HasForeignKey("AudienceId1");

                    b.HasOne("Astrana.Core.Data.Entities.Peers.PeerCircle", null)
                        .WithMany("Peers")
                        .HasForeignKey("PeerCircleId");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.User.UserEmailAddressRelationship", b =>
                {
                    b.HasOne("Astrana.Core.Data.Entities.ContactInformation.EmailAddress", "EmailAddress")
                        .WithMany("Relationships")
                        .HasForeignKey("EmailAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Astrana.Core.Data.Entities.Identity.UserAccount", "UserAccount")
                        .WithMany("EmailAddresses")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailAddress");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.User.UserMessengerUsernameRelationship", b =>
                {
                    b.HasOne("Astrana.Core.Data.Entities.ContactInformation.MessengerUsername", "MessengerUsername")
                        .WithMany("Relationships")
                        .HasForeignKey("MessengerUsernameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Astrana.Core.Data.Entities.Identity.UserAccount", "UserAccount")
                        .WithMany("MessengerUsernames")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MessengerUsername");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.User.UserPhoneNumberRelationship", b =>
                {
                    b.HasOne("Astrana.Core.Data.Entities.ContactInformation.PhoneNumber", "PhoneNumber")
                        .WithMany("Relationships")
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Astrana.Core.Data.Entities.Identity.UserAccount", "UserAccount")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PhoneNumber");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.User.UserProfile", b =>
                {
                    b.HasOne("Astrana.Core.Data.Entities.Content.Image", "CoverPicture")
                        .WithMany()
                        .HasForeignKey("CoverPictureImageId");

                    b.HasOne("Astrana.Core.Data.Entities.Content.ContentCollection", "CoverPicturesCollection")
                        .WithMany()
                        .HasForeignKey("CoverPicturesCollectionContentCollectionId");

                    b.HasOne("Astrana.Core.Data.Entities.Content.Image", "ProfilePicture")
                        .WithMany()
                        .HasForeignKey("ProfilePictureImageId");

                    b.HasOne("Astrana.Core.Data.Entities.Content.ContentCollection", "ProfilePicturesCollection")
                        .WithMany()
                        .HasForeignKey("ProfilePicturesCollectionContentCollectionId");

                    b.HasOne("Astrana.Core.Data.Entities.Identity.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoverPicture");

                    b.Navigation("CoverPicturesCollection");

                    b.Navigation("ProfilePicture");

                    b.Navigation("ProfilePicturesCollection");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.User.UserProfileDetail", b =>
                {
                    b.HasOne("Astrana.Core.Data.Entities.User.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("CountryTimeZone", b =>
                {
                    b.HasOne("Astrana.Core.Data.Entities.Configuration.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Astrana.Core.Data.Entities.Configuration.TimeZone", null)
                        .WithMany()
                        .HasForeignKey("TimeZonesCorrespondingUtcZone", "TimeZonesAbbreviation", "TimeZonesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Configuration.Audience", b =>
                {
                    b.Navigation("Countries");

                    b.Navigation("PeersExcluded");

                    b.Navigation("PeersIncluded");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Configuration.SystemSettingCategory", b =>
                {
                    b.Navigation("Settings");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.ContactInformation.EmailAddress", b =>
                {
                    b.Navigation("Relationships");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.ContactInformation.MessengerUsername", b =>
                {
                    b.Navigation("Relationships");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.ContactInformation.PhoneNumber", b =>
                {
                    b.Navigation("Relationships");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Content.ContentCollection", b =>
                {
                    b.Navigation("ContentCollectionItems");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Content.Post", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Identity.UserAccount", b =>
                {
                    b.Navigation("EmailAddresses");

                    b.Navigation("MessengerUsernames");

                    b.Navigation("PhoneNumbers");

                    b.Navigation("UserAccountRoles");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Identity.UserRole", b =>
                {
                    b.Navigation("UserAccountRoles");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.Peers.PeerCircle", b =>
                {
                    b.Navigation("Peers");
                });

            modelBuilder.Entity("Astrana.Core.Data.Entities.User.UserProfileDetail", b =>
                {
                    b.Navigation("Audiences");
                });
#pragma warning restore 612, 618
        }
    }
}
